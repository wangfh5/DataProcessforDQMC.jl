var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DataProcessforDQMC","category":"page"},{"location":"#DataProcessforDQMC","page":"Home","title":"DataProcessforDQMC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DataProcessforDQMC.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DataProcessforDQMC]","category":"page"},{"location":"#DataProcessforDQMC.format_edgerdata-Tuple{String, String}","page":"Home","title":"DataProcessforDQMC.format_edgerdata","text":"format_edgerdata(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for r-dependent data along the edge of a cylinder with each row corresponding to a bin and a spatial position.  The spatial position is from 1 to L/2, where L is the length of the edge (typically an even number). Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. In the .csv file, the first column is the bin index, the second column is the spatial position, and the third column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.format_edgerfulldata-Tuple{String, String}","page":"Home","title":"DataProcessforDQMC.format_edgerfulldata","text":"format_edgerfulldata(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for r-dependent data along the edge of a cylinder with each row corresponding to a bin and a spatial position.  Contain all the two-point correlation information between all points along the same edges. Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. In the .csv file, the first column is the bin index, the second column is the edge number,  the third column is the starting point i, the fourth column is the distance from i,  and the fifth column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.format_energy-Tuple{String, Vector{String}}","page":"Home","title":"DataProcessforDQMC.format_energy","text":"format_energy(data_dir::String, energy_list::Array{String,1})\n\nFormat the energy.bin in data_dir into a dataframe and store it in a .csv and .toml file.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.format_kdata-Tuple{String, String}","page":"Home","title":"DataProcessforDQMC.format_kdata","text":"format_kdata(data_dir::String, obsname::String; ifsave::Bool = false)\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.format_onecol-Tuple{String, String}","page":"Home","title":"DataProcessforDQMC.format_onecol","text":"format_onecol(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for one-column data with each row corresponding to a bin. Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. In the .csv file, the first column is the bin index, and the second column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.format_pair_onsite_edge-Tuple{String}","page":"Home","title":"DataProcessforDQMC.format_pair_onsite_edge","text":"format_pair_onsite_edge(data_dir::String)\n\nFormat the pair_onsite_edge.bin, pair_onsite_interedges.bin and pair_onsite_intraedges.bin in data_dir into a dataframe and store it in a .csv and .toml file.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.format_pair_onsite_r-Tuple{String, Int64}","page":"Home","title":"DataProcessforDQMC.format_pair_onsite_r","text":"format_pair_onsite_r(data_dir::String, L::Int)\n\nFormat the pair_onsite_r.bin in data_dir into a dataframe and store it in a .csv and .toml file. For now, only support one sublattice system. This function support old-fashioned output data, i.e., only output the values without the coordinates, so users need to specify the lattice size L. Just a compatibility function for old-fashioned output, and will be deprecated in the future.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.format_rdata-Tuple{String, String}","page":"Home","title":"DataProcessforDQMC.format_rdata","text":"format_rdata(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for r-dependent data with each row corresponding to a bin and a spatial position. Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. For now, only support 2D system with one sublattice. In the .csv file, the first column is the bin index, the second and third columns are the x and y coordinates, and the fourth column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.insert_parameters_cols-Tuple{DataFrames.DataFrame, String}","page":"Home","title":"DataProcessforDQMC.insert_parameters_cols","text":"insert_parameters_cols(df::DataFrame,data_dir::String)\n\nExact parameters from data_dir and insert them as columns into df. e.g. data_dir = \".../proj_majo_cy.b16.000.U-4.00.Delta_ppm0.4.mu-0.5.L8.dtau0.05/\"  will extract beta, U, Delta_ppm, mu, L and dtau from it.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.read_format_data-Tuple{String, String}","page":"Home","title":"DataProcessforDQMC.read_format_data","text":"read_format_data(dataname::String, data_dir::String)\n\nRead dataname.csv and dataname.toml in data_dir.\n\n\n\n\n\n","category":"method"},{"location":"#DataProcessforDQMC.write_df-Tuple{DataFrames.DataFrame, String, String}","page":"Home","title":"DataProcessforDQMC.write_df","text":"write_df(df::DataFrame, data_dir::String, dataname::String)\n\nWrite df into data_dir/formatted_data/dataname.csv and data_dir/formatted_data/dataname.toml.\n\n\n\n\n\n","category":"method"}]
}
