var documenterSearchIndex = {"docs":
[{"location":"api/#api_reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"本页面包含 DataProcessforDQMC.jl 的完整 API 参考文档。","category":"page"},{"location":"api/#索引","page":"API Reference","title":"索引","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [DataProcessforDQMC]\nOrder = [:module, :type, :function]","category":"page"},{"location":"api/#完整-API-文档","page":"API Reference","title":"完整 API 文档","text":"","category":"section"},{"location":"api/#DataProcessforDQMC.AFMCorrelationRatio","page":"API Reference","title":"DataProcessforDQMC.AFMCorrelationRatio","text":"AFMCorrelationRatio(shift_point::Tuple{<:Real,<:Real}, Q_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                 filename::String=\"afm_sf_k.bin\", source_file::String=\"spsm_k.bin\", filedir::String=pwd();\n                 force_rebuild::Bool=false, startbin::Int=2, endbin::Union{Int,Nothing}=nothing, dropmaxmin::Int=0,\n                 orbital_columns::Vector{Tuple{Int,Int}}=[(3,4), (5,6), (7,8), (9,10)],\n                 orbital_labels::Vector{String}=[\"AA\", \"AB\", \"BA\", \"BB\"],\n                 auto_digits::Bool=true, tolerance::Float64=1e-6, verbose::Bool=true)\n\nCalculate the correlation ratio R_{m^2} for antiferromagnetic structure factor, used to quantify disorder-order transitions.\n\nFormula\n\nR{m^2} = 1 - SAFM(Q+δq) / S_AFM(Q) where δq is a small shift in reciprocal space\n\nParameters\n\nshift_point: Momentum space shift (δqx, δqy)\nQ_point: Antiferromagnetic vector Q (default: (0.0, 0.0))\nfilename: Structure factor file name (default: \"afmsfk.bin\")\nsource_file: Source file to generate structure factor if not exists (default: \"spsm_k.bin\")\nfiledir: File directory (default: current directory)\nforce_rebuild: Force rebuild structure factor file even if exists (default: false)\nstartbin: Starting bin (default: 2)\nendbin: Ending bin (default: all bins)\ndropmaxmin: Number of max/min values to drop (default: 0)\norbital_columns: Orbital column indices (default: [(3,4), (5,6), (7,8), (9,10)])\norbital_labels: Orbital labels (default: [\"AA\", \"AB\", \"BA\", \"BB\"])\nauto_digits: Whether to automatically determine significant digits (default: true)\ntolerance: Tolerance for matching k-points (default: 1e-6)\nverbose: Whether to output detailed information (default: true)\n\nReturns\n\nA named tuple with the following fields:\n\nQ_point: Antiferromagnetic vector Q\nshift_point: Momentum space shift (δqx, δqy)\nQ_shifted: Shifted k-point\nS_AFM_Q: Antiferromagnetic structure factor at Q\nerr_S_AFM_Q: Error of the antiferromagnetic structure factor at Q\nS_AFM_Q_shifted: Antiferromagnetic structure factor at the shifted point\nerr_S_AFM_Q_shifted: Error of the antiferromagnetic structure factor at the shifted point\ncorrelation_ratio: Calculated correlation ratio\nerr_correlation_ratio: Error of the correlation ratio\nformatted_correlation_ratio: Formatted correlation ratio result\n\nExample\n\n# Calculate correlation ratio with (0.25,0) shift\nresult = AFMCorrelationRatio((0.25, 0.0))\nprintln(\"Correlation Ratio: $(result.formatted_correlation_ratio)\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.AFMStructureFactor","page":"API Reference","title":"DataProcessforDQMC.AFMStructureFactor","text":"AFMStructureFactor(k_point=(0.0, 0.0), filename=\"afm_sf_k.bin\", filedir=pwd();\n                 force_rebuild=false, source_file=\"spsm_k.bin\", startbin=2, endbin=nothing, dropmaxmin=0,\n                 auto_digits=true, tolerance=1e-6, verbose=true)\n\nCalculate antiferromagnetic structure factor SAF(L) = [spsmk(0,A,A) + spsmk(0,B,B) - spsmk(0,A,B) - spsm_k(0,B,A)].\n\nThe function can use either:\n\nA pre-processed file (default: \"afmsfk.bin\") containing the structure factor directly\nA source file (e.g., \"spsmk.bin\" or \"ssk.bin\") to generate the structure factor file if it doesn't exist or force_rebuild is true\n\nParameters:\n\nk_point: Target momentum point, default (0.0, 0.0)\nfilename: Target structure factor file name (default: \"afmsfk.bin\")\nfiledir: Directory containing the files (default: current directory)\nforce_rebuild: Whether to force rebuild the structure factor file even if it exists (default: false)\nsource_file: Source file to generate structure factor if needed (default: \"spsm_k.bin\")\nstartbin: Starting bin for statistics (default: 2)\nendbin: Ending bin for statistics (default: all bins)\ndropmaxmin: Number of max/min values to drop (default: 0)\nauto_digits: Whether to automatically determine significant digits (default: true)\ntolerance: Tolerance for k-point matching (default: 1e-6)\nverbose: Whether to output detailed information (default: true)\n\nReturns:\n\nA named tuple with the following fields:\nk_point: The actual k-point used\nmean_real: Mean value of the real part\nmean_imag: Mean value of the imaginary part\nerr_real: Error estimate for the real part\nerr_imag: Error estimate for the imaginary part\nformatted_real: Formatted string for the real part\nformatted_imag: Formatted string for the imaginary part\n\nExamples:\n\n# Use existing afm_sf_k.bin file\nresult = AFMStructureFactor()\n\n# Force rebuild from source file\nresult = AFMStructureFactor(force_rebuild=true)\n\n# Specify custom filenames\nresult = AFMStructureFactor(filename=\"custom_afm_sf.bin\", source_file=\"custom_afm_source.bin\", force_rebuild=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.CDWCorrelationRatio","page":"API Reference","title":"DataProcessforDQMC.CDWCorrelationRatio","text":"CDWCorrelationRatio(shift_point::Tuple{<:Real,<:Real}, Q_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                 filename::String=\"cdwpair_sf_k.bin\", source_file::String=\"cdwpair_k.bin\", filedir::String=pwd();\n                 force_rebuild::Bool=false, startbin::Int=2, endbin::Union{Int,Nothing}=nothing, dropmaxmin::Int=0,\n                 orbital_columns::Vector{Tuple{Int,Int}}=[(3,4), (5,6), (7,8), (9,10)],\n                 orbital_labels::Vector{String}=[\"AA\", \"AB\", \"BA\", \"BB\"],\n                 auto_digits::Bool=true, tolerance::Float64=1e-6, verbose::Bool=true)\n\nCalculate the correlation ratio R_{m^2} for charge density wave structure factor, used to quantify disorder-order transitions.\n\nFormula\n\nR{m^2} = 1 - SCDW(Q+δq) / S_CDW(Q) where δq is a small shift in reciprocal space\n\nParameters\n\nshift_point: Momentum space shift (δqx, δqy)\nQ_point: CDW ordering vector Q (default: (0.0, 0.0))\nfilename: Structure factor file name (default: \"cdwpairsfk.bin\")\nsource_file: Source file to generate structure factor if not exists (default: \"cdwpair_k.bin\")\nfiledir: File directory (default: current directory)\nforce_rebuild: Force rebuild structure factor file even if exists (default: false)\nstartbin: Starting bin (default: 2)\nendbin: Ending bin (default: all bins)\ndropmaxmin: Number of max/min values to drop (default: 0)\norbital_columns: Orbital column indices (default: [(3,4), (5,6), (7,8), (9,10)])\norbital_labels: Orbital labels (default: [\"AA\", \"AB\", \"BA\", \"BB\"])\nauto_digits: Whether to automatically determine significant digits (default: true)\ntolerance: Tolerance for matching k-points (default: 1e-6)\nverbose: Whether to output detailed information (default: true)\n\nReturns\n\nA named tuple with the following fields:\n\nQ_point: CDW ordering vector Q\nshift_point: Momentum space shift (δqx, δqy)\nQ_shifted: Shifted k-point\nS_CDW_Q: CDW structure factor at Q\nerr_S_CDW_Q: Error of the CDW structure factor at Q\nS_CDW_Q_shifted: CDW structure factor at the shifted point\nerr_S_CDW_Q_shifted: Error of the CDW structure factor at the shifted point\ncorrelation_ratio: Calculated correlation ratio\nerr_correlation_ratio: Error of the correlation ratio\nformatted_correlation_ratio: Formatted correlation ratio result\n\nExample\n\n# Calculate correlation ratio with (0.25,0) shift\nresult = CDWCorrelationRatio((0.25, 0.0))\nprintln(\"Correlation Ratio: $(result.formatted_correlation_ratio)\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.CDWStructureFactor","page":"API Reference","title":"DataProcessforDQMC.CDWStructureFactor","text":"CDWStructureFactor(k_point=(0.0, 0.0), filename=\"cdwpair_sf_k.bin\", filedir=pwd();\n                 force_rebuild=false, source_file=\"cdwpair_k.bin\", startbin=2, endbin=nothing, dropmaxmin=0,\n                 auto_digits=true, tolerance=1e-6, verbose=true)\n\nCalculate charge density wave structure factor SCDW(L) = [cdwpairk(0,A,A) + cdwpairk(0,B,B) + cdwpairk(0,A,B) + cdwpair_k(0,B,A)].\n\nThe function can use either:\n\nA pre-processed file (default: \"cdwpairsfk.bin\") containing the structure factor directly\nA source file (e.g., \"cdwpairk.bin\") to generate the structure factor file if it doesn't exist or `forcerebuild` is true\n\nParameters:\n\nk_point: Target momentum point, default (0.0, 0.0)\nfilename: Target structure factor file name (default: \"cdwpairsfk.bin\")\nfiledir: Directory containing the files (default: current directory)\nforce_rebuild: Whether to force rebuild the structure factor file even if it exists (default: false)\nsource_file: Source file to generate structure factor if needed (default: \"cdwpair_k.bin\")\nstartbin: Starting bin for statistics (default: 2)\nendbin: Ending bin for statistics (default: all bins)\ndropmaxmin: Number of max/min values to drop (default: 0)\nauto_digits: Whether to automatically determine significant digits (default: true)\ntolerance: Tolerance for k-point matching (default: 1e-6)\nverbose: Whether to output detailed information (default: true)\n\nReturns:\n\nA named tuple with the following fields:\nk_point: The actual k-point used\nmean_real: Mean value of the real part\nmean_imag: Mean value of the imaginary part\nerr_real: Error estimate for the real part\nerr_imag: Error estimate for the imaginary part\nformatted_real: Formatted string for the real part\nformatted_imag: Formatted string for the imaginary part\n\nExamples:\n\n# Use existing cdwpair_sf_k.bin file\nresult = CDWStructureFactor()\n\n# Force rebuild from source file\nresult = CDWStructureFactor(force_rebuild=true)\n\n# Specify custom filenames\nresult = CDWStructureFactor(filename=\"custom_cdw_sf.bin\", source_file=\"custom_cdw.bin\", force_rebuild=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.CorrelationAnalysis","page":"API Reference","title":"DataProcessforDQMC.CorrelationAnalysis","text":"CorrelationAnalysis(filename=\"spsm_r.bin\", filedir=pwd();\n                   startbin=2, endbin=nothing, dropmaxmin=0,\n                   real_column=3, imag_column=4,\n                   auto_digits=true,\n                   verbose=true)\n\nAnalyze correlation function data files like spsm_r.bin or nn_r.bin, where the first two columns represent imj coordinates (distance vector between points i and j), and calculate Monte Carlo averages.\n\nArguments:\n\nfilename: Name of the correlation file (default: \"spsm_r.bin\")\nfiledir: Directory containing the file (default: current directory)\nstartbin: First bin to include in analysis (default: 2)\nendbin: Last bin to include in analysis (default: all bins)\ndropmaxmin: Number of maximum and minimum values to drop (default: 0)\nreal_column: Column index containing the real part of correlation values (default: 3)\nimag_column: Column index containing the imaginary part of correlation values (default: 4)\nauto_digits: Whether to automatically determine significant digits based on error of error (default: true)\nverbose: Whether to print results to console (default: true)\n\nReturns:\n\nDataFrame containing the following columns:\ncoord: Tuple of (i,j) coordinates\nimj_x, imj_y: x and y components of the distance vector\nmean_real, mean_imag: Mean values of real and imaginary parts\nerr_real, err_imag: Errors of real and imaginary parts\nformatted_real, formatted_imag: Formatted strings of values with errors\ndistance: Euclidean distance from origin\ni_coord: coordinates of unit cell i relative to j = (1,1)\n\nExample:\n\n# Analyze spsm_r.bin in current directory\nresults = CorrelationAnalysis()\n\n# Analyze nn_r.bin with custom columns\nresults = CorrelationAnalysis(\"nn_r.bin\", real_column=3, imag_column=4)\n\n# Access results\nreal_part = results[1, :mean_real]      # mean of real part\nimag_part = results[1, :mean_imag]      # mean of imaginary part\nreal_err = results[1, :err_real]        # error of real part\nimag_err = results[1, :err_imag]        # error of imaginary part\n\n# Get coordinates and values\nfor row in eachrow(results)\n    coord = row.coord\n    real_val = row.mean_real\n    imag_val = row.mean_imag\n    real_e = row.err_real\n    imag_e = row.err_imag\n    # Format as complex number for display\n    complex_val = \"($real_val ± $real_e) + ($imag_val ± $imag_e)im\"\n    println(\"At $coord: $complex_val\")\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.EnergyAnalysis","page":"API Reference","title":"DataProcessforDQMC.EnergyAnalysis","text":"EnergyAnalysis(filename=\"energy.bin\", filedir=pwd();\n               startbin=2, endbin=nothing, dropmaxmin=0,\n               columns=[5,7,9,11], labels=[\"E_kin\", \"E_pot\", \"E_tot\", \"E_tot^2\"],\n               verbose=true)\n\nAnalyze energy.bin file and calculate Monte Carlo averages and errors for specified columns.\n\nArguments:\n\nfilename: Name of the energy file (default: \"energy.bin\")\nfiledir: Directory containing the file (default: current directory)\nstartbin: First bin to include in analysis (default: 2)\nendbin: Last bin to include in analysis (default: all bins)\ndropmaxmin: Number of maximum and minimum values to drop (default: 0)\ncolumns: Array of column indices to analyze (default: [5,7,9,11])\nlabels: Array of labels for the columns (default: [\"Ekin\", \"Epot\", \"Etot\", \"Etot^2\"])\nverbose: Whether to print results to console (default: true)\n\nReturns:\n\nDictionary with column labels as keys and [mean, error] arrays as values\n\nExample:\n\n# Analyze energy.bin in current directory\nresults = EnergyAnalysis()\n\n# Analyze specific columns with custom labels\nresults = EnergyAnalysis(columns=[5,7], labels=[\"Kinetic\", \"Potential\"])\n\n# Access results\nkinetic_energy = results[\"Kinetic\"][1]  # mean value\nkinetic_error = results[\"Kinetic\"][2]   # error\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.KSpaceCorrelationAnalysis","page":"API Reference","title":"DataProcessforDQMC.KSpaceCorrelationAnalysis","text":"KSpaceCorrelationAnalysis(filename=\"nn_k.bin\", filedir=pwd();\n                         startbin=2, endbin=nothing, dropmaxmin=0,\n                         real_column=3, imag_column=4,\n                         auto_digits=true,\n                         verbose=true)\n\nAnalyze k-space correlation function data files like nn_k.bin or spsm_k.bin, where the first two columns represent k-space coordinates, and calculate Monte Carlo averages.\n\nArguments:\n\nfilename: Name of the correlation file (default: \"nn_k.bin\")\nfiledir: Directory containing the file (default: current directory)\nstartbin: First bin to include in analysis (default: 2)\nendbin: Last bin to include in analysis (default: all bins)\ndropmaxmin: Number of maximum and minimum values to drop (default: 0)\nreal_column: Column index containing the real part of correlation values (default: 3)\nimag_column: Column index containing the imaginary part of correlation values (default: 4)\nauto_digits: Whether to automatically determine significant digits based on error of error (default: true)\nverbose: Whether to print results to console (default: true)\n\nReturns:\n\nDataFrame containing the following columns:\ncoord: Tuple of k-point coordinates\nkx, ky: x and y components of the k-point\nmean_real, mean_imag: Mean values of real and imaginary parts\nerr_real, err_imag: Errors of real and imaginary parts\nformatted_real, formatted_imag: Formatted strings of values with errors\nk_magnitude: Magnitude of the k-point\n\nExample:\n\n# Analyze nn_k.bin in current directory\nresults = KSpaceCorrelationAnalysis()\n\n# Analyze spsm_k.bin with custom columns\nresults = KSpaceCorrelationAnalysis(\"spsm_k.bin\", real_column=3, imag_column=4)\n\n# Access results\nreal_part = results[1, :mean_real]      # mean of real part\nimag_part = results[1, :mean_imag]      # mean of imaginary part\nreal_err = results[1, :err_real]        # error of real part\nimag_err = results[1, :err_imag]        # error of imaginary part\n\n# Get coordinates and values\nfor row in eachrow(results)\n    coord = row.coord\n    real_val = row.mean_real\n    imag_val = row.mean_imag\n    real_e = row.err_real\n    imag_e = row.err_imag\n    # Format as complex number for display\n    complex_val = \"($real_val ± $real_e) + ($imag_val ± $imag_e)im\"\n    println(\"At $coord: $complex_val\")\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.MultiOrbitalCorrelationAnalysis","page":"API Reference","title":"DataProcessforDQMC.MultiOrbitalCorrelationAnalysis","text":"MultiOrbitalCorrelationAnalysis(filename=\"nn_r.bin\", filedir=pwd();\n                              startbin=2, endbin=nothing, dropmaxmin=0,\n                              orbital_columns=[(3,4), (5,6), (7,8), (9,10)],\n                              orbital_labels=[\"AA\", \"AB\", \"BA\", \"BB\"],\n                              auto_digits=true,\n                              verbose=true)\n\nAnalyze multi-orbital correlation function data files, where each orbital pair has its own real and imaginary columns.\n\nArguments:\n\nfilename: Name of the correlation file (default: \"nn_r.bin\")\nfiledir: Directory containing the file (default: current directory)\nstartbin: First bin to include in analysis (default: 2)\nendbin: Last bin to include in analysis (default: all bins)\ndropmaxmin: Number of maximum and minimum values to drop (default: 0)\norbital_columns: Array of (realcolumn, imagcolumn) tuples for each orbital (default: [(3,4), (5,6), (7,8), (9,10)])\norbital_labels: Array of labels for each orbital (default: [\"AA\", \"AB\", \"BA\", \"BB\"])\nauto_digits: Whether to automatically determine significant digits based on error of error (default: true)\nverbose: Whether to print results to console (default: true)\n\nReturns:\n\nDataFrame containing statistics for each coordinate and orbital\n\nExample:\n\n# Analyze nn_r.bin in current directory with default orbital columns\nresults = MultiOrbitalCorrelationAnalysis()\n\n# Access results\ncorr_1_1_AA_real = results[1, :AA_mean_real]  # mean real value at first row for AA orbital\ncorr_1_1_AB_imag = results[1, :AB_mean_imag]  # mean imag value at first row for AB orbital\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.MultiOrbitalKSpaceCorrelationAnalysis","page":"API Reference","title":"DataProcessforDQMC.MultiOrbitalKSpaceCorrelationAnalysis","text":"MultiOrbitalKSpaceCorrelationAnalysis(filename=\"nn_k.bin\", filedir=pwd();\n                                    startbin=2, endbin=nothing, dropmaxmin=0,\n                                    orbital_columns=[(3,4), (5,6), (7,8), (9,10)],\n                                    orbital_labels=[\"AA\", \"AB\", \"BA\", \"BB\"],\n                                    auto_digits=true,\n                                    verbose=true)\n\nAnalyze multi-orbital k-space correlation function data files, where each orbital pair has its own real and imaginary columns.\n\nArguments:\n\nfilename: Name of the correlation file (default: \"nn_k.bin\")\nfiledir: Directory containing the file (default: current directory)\nstartbin: First bin to include in analysis (default: 2)\nendbin: Last bin to include in analysis (default: all bins)\ndropmaxmin: Number of maximum and minimum values to drop (default: 0)\norbital_columns: Array of (realcolumn, imagcolumn) tuples for each orbital (default: [(3,4), (5,6), (7,8), (9,10)])\norbital_labels: Array of labels for each orbital (default: [\"AA\", \"AB\", \"BA\", \"BB\"])\nauto_digits: Whether to automatically determine significant digits based on error of error (default: true)\nverbose: Whether to print results to console (default: true)\n\nReturns:\n\nDataFrame containing statistics for each coordinate and orbital\n\nExample:\n\n# Analyze nn_k.bin in current directory with default orbital columns\nresults = MultiOrbitalKSpaceCorrelationAnalysis()\n\n# Access results\ncorr_1_1_AA_real = results[1, :AA_mean_real]  # mean real value at first row for AA orbital\ncorr_1_1_AB_imag = results[1, :AB_mean_imag]  # mean imag value at first row for AB orbital\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.MultiOrbitalStructureFactorAnalysis","page":"API Reference","title":"DataProcessforDQMC.MultiOrbitalStructureFactorAnalysis","text":"MultiOrbitalStructureFactorAnalysis(k_point, orbital_pair, filename=\"spsm_k.bin\", filedir=pwd();\n                                   startbin=2, endbin=nothing, dropmaxmin=0,\n                                   orbital_columns=[(3,4), (5,6), (7,8), (9,10)],\n                                   orbital_labels=[\"AA\", \"AB\", \"BA\", \"BB\"],\n                                   auto_digits=true, tolerance=1e-6, verbose=true)\n\n从多轨道k空间关联函数数据中提取特定动量点和轨道对的结构因子。\n\n参数:\n\nk_point: 目标动量点，格式为 (kx, ky) 的元组\norbital_pair: 轨道对标签 (如 \"AA\", \"AB\" 等)\nfilename: 关联函数文件名 (默认: \"spsm_k.bin\")\nfiledir: 文件目录 (默认: 当前目录)\nstartbin: 起始bin (默认: 2)\nendbin: 结束bin (默认: 所有bin)\ndropmaxmin: 丢弃的最大最小值数量 (默认: 0)\norbital_columns: 轨道列索引数组 (默认: [(3,4), (5,6), (7,8), (9,10)])\norbital_labels: 轨道标签数组 (默认: [\"AA\", \"AB\", \"BA\", \"BB\"])\nauto_digits: 是否自动确定有效数字 (默认: true)\ntolerance: 匹配k点时的容差 (默认: 1e-6)\nverbose: 是否输出详细信息 (默认: true)\n\n返回:\n\n包含以下字段的命名元组:\nk_point: 实际使用的k点坐标\norbital: 轨道对标签\nmean_real, mean_imag: 平均值（实部和虚部）\nerr_real, err_imag: 误差（实部和虚部）\nformatted_real, formatted_imag: 格式化后的结果字符串\n\n示例:\n\n# 分析 (0,0) 点的AA轨道结构因子\nresult = MultiOrbitalStructureFactorAnalysis((0.0, 0.0), \"AA\", \"spsm_k.bin\")\nprintln(\"AA orbital at Γ point: $(result.formatted_real)\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.StructureFactorAnalysis","page":"API Reference","title":"DataProcessforDQMC.StructureFactorAnalysis","text":"StructureFactorAnalysis(k_point, filename=\"spsm_k.bin\", filedir=pwd();\n                       startbin=2, endbin=nothing, dropmaxmin=0,\n                       real_column=3, imag_column=4,\n                       auto_digits=true, tolerance=1e-6, verbose=true)\n\n从k空间关联函数数据中提取特定动量点的结构因子。\n\n参数:\n\nk_point: 目标动量点，格式为 (kx, ky) 的元组\nfilename: 关联函数文件名 (默认: \"spsm_k.bin\")\nfiledir: 文件目录 (默认: 当前目录)\nstartbin: 起始bin (默认: 2)\nendbin: 结束bin (默认: 所有bin)\ndropmaxmin: 丢弃的最大最小值数量 (默认: 0)\nreal_column: 实部列索引 (默认: 3)\nimag_column: 虚部列索引 (默认: 4)\nauto_digits: 是否自动确定有效数字 (默认: true)\ntolerance: 匹配k点时的容差 (默认: 1e-6)\nverbose: 是否输出详细信息 (默认: true)\n\n返回:\n\n包含以下字段的命名元组:\nk_point: 实际使用的k点坐标\nmean_real, mean_imag: 平均值（实部和虚部）\nerr_real, err_imag: 误差（实部和虚部）\nformatted_real, formatted_imag: 格式化后的结果字符串\n\n示例:\n\n# 分析 (π,π) 点的结构因子\nresult = StructureFactorAnalysis((π, π), \"spsm_k.bin\")\nprintln(\"Real part: $(result.mean_real) ± $(result.err_real)\")\nprintln(\"Imag part: $(result.mean_imag) ± $(result.err_imag)\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.afm_k_files_generation","page":"API Reference","title":"DataProcessforDQMC.afm_k_files_generation","text":"afm_k_files_generation(dir::AbstractString; afm_source::String=\"ss_k.bin\", verbose::Bool=true)\n\n重新生成目录中所有与反铁磁相关的衍生数据文件。\n\n参数\n\ndir::AbstractString: 数据目录，默认为当前工作目录\nafm_source::String: 用于生成反铁磁结构因子的源文件名，默认为\"ss_k.bin\"\nverbose::Bool: 是否输出详细信息，默认为true\n\n返回值\n\nDict{String, String}: 包含生成的文件路径的字典，键为文件名，值为完整路径\n\n示例\n\n# 使用默认设置重新生成AFM相关文件\nfiles = afm_k_files_generation()\n\n# 指定目录和数据源文件\nfiles = afm_k_files_generation(\"/path/to/data\", afm_source=\"custom_source.bin\", verbose=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.analyze_AFM_correlation_ratio_multi_parameter","page":"API Reference","title":"DataProcessforDQMC.analyze_AFM_correlation_ratio_multi_parameter","text":"analyze_AFM_correlation_ratio_multi_parameter(base_dir::AbstractString=pwd();\n                                           shift_point::Tuple{<:Real,<:Real}=(0.25, 0.0),\n                                           Q_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                                           filename::String=\"afm_sf_k.bin\",\n                                           source_file::String=\"spsm_k.bin\",\n                                           force_rebuild::Bool=false,\n                                           startbin::Int=2,\n                                           endbin::Union{Int,Nothing}=nothing,\n                                           dropmaxmin::Int=0,\n                                           auto_digits::Bool=true,\n                                           tolerance::Float64=1e-6,\n                                           verbose::Bool=false,\n                                           filter_options::Union{Dict, NamedTuple}=Dict()) -> DataFrame\n\nAnalyze AFM correlation ratio across multiple parameter directories.\n\nParameters\n\nbase_dir::AbstractString: Base directory containing parameter directories (default: current directory)\nshift_point::Tuple{<:Real,<:Real}: Momentum space shift (δqx, δqy) (default: (0.25, 0.0))\nQ_point::Tuple{<:Real,<:Real}: AFM ordering vector Q (default: (0.0, 0.0))\nfilename::String: Structure factor file name (default: \"afmsfk.bin\")\nsource_file::String: Source file to generate structure factor if not exists (default: \"spsm_k.bin\")\nforce_rebuild::Bool: Force rebuild structure factor file even if exists (default: false)\nstartbin::Int: Starting bin for analysis (default: 2)\nendbin::Union{Int,Nothing}: Ending bin for analysis (default: all bins)\ndropmaxmin::Int: Number of max/min values to drop (default: 0)\nauto_digits::Bool: Whether to automatically determine significant digits (default: true)\ntolerance::Float64: Tolerance for matching k-points (default: 1e-6)\nverbose::Bool: Whether to output detailed information (default: false)\nfilter_options::Union{Dict, NamedTuple}: Options for filtering parameter directories (default: empty Dict)\n\nReturns\n\nDataFrame: DataFrame containing parameters and AFM correlation ratio results\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.analyze_AFM_structure_factor_multi_parameter","page":"API Reference","title":"DataProcessforDQMC.analyze_AFM_structure_factor_multi_parameter","text":"analyze_AFM_structure_factor_multi_parameter(base_dir::AbstractString=pwd(); \n                                           k_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                                           filename::String=\"afm_sf_k.bin\",\n                                           force_rebuild::Bool=false,\n                                           source_file::String=\"spsm_k.bin\",\n                                           startbin::Int=2, \n                                           endbin::Union{Int,Nothing}=nothing, \n                                           dropmaxmin::Int=0,\n                                           auto_digits::Bool=true, \n                                           tolerance::Float64=1e-6, \n                                           verbose::Bool=false,\n                                           filter_options::Union{Dict, NamedTuple}=Dict()) -> DataFrame\n\n对多个参数目录执行反铁磁结构因子分析，并将结果整合到一个DataFrame中。\n\n参数\n\nbase_dir::AbstractString=pwd(): 基础目录路径，默认为当前工作目录\nk_point::Tuple{<:Real,<:Real}=(0.0, 0.0): 要分析的k点\nfilename::String=\"afm_sf_k.bin\": 要分析的结构因子文件名\nforce_rebuild::Bool=false: 是否强制重新构建结构因子文件\nsource_file::String=\"spsm_k.bin\": 当 filename 不存在时，用于生成结构因子的源文件名\nstartbin::Int=2: 起始bin编号\nendbin::Union{Int,Nothing}=nothing: 结束bin编号\ndropmaxmin::Int=0: 丢弃的最大/最小值数量\nauto_digits::Bool=true: 是否自动确定有效数字\ntolerance::Float64=1e-6: k点匹配容差\nverbose::Bool=false: 是否显示详细信息\nfilter_options::Union{Dict, NamedTuple}=Dict(): 目录筛选选项，可包含:prefix、:b、:U等参数\npattern::Regex=r\"\": 用于匹配目录名的正则表达式\n\n返回值\n\nDataFrame: 包含所有参数和分析结果的DataFrame\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.analyze_CDW_correlation_ratio_multi_parameter","page":"API Reference","title":"DataProcessforDQMC.analyze_CDW_correlation_ratio_multi_parameter","text":"analyze_CDW_correlation_ratio_multi_parameter(base_dir::AbstractString=pwd();\n                                           shift_point::Tuple{<:Real,<:Real}=(0.25, 0.0),\n                                           Q_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                                           filename::String=\"cdwpair_sf_k.bin\",\n                                           source_file::String=\"cdwpair_k.bin\",\n                                           force_rebuild::Bool=false,\n                                           startbin::Int=2,\n                                           endbin::Union{Int,Nothing}=nothing,\n                                           dropmaxmin::Int=0,\n                                           auto_digits::Bool=true,\n                                           tolerance::Float64=1e-6,\n                                           verbose::Bool=false,\n                                           filter_options::Union{Dict, NamedTuple}=Dict(),\n                                           pattern::Regex=r\"^proj_fft_honeycomb\") -> DataFrame\n\nAnalyze CDW correlation ratio across multiple parameter directories.\n\nParameters\n\nbase_dir::AbstractString: Base directory containing parameter directories (default: current directory)\nshift_point::Tuple{<:Real,<:Real}: Momentum space shift (δqx, δqy) (default: (0.25, 0.0))\nQ_point::Tuple{<:Real,<:Real}: CDW ordering vector Q (default: (0.0, 0.0))\nfilename::String: Structure factor file name (default: \"cdwpairsfk.bin\")\nsource_file::String: Source file to generate structure factor if not exists (default: \"cdwpair_k.bin\")\nforce_rebuild::Bool: Force rebuild structure factor file even if exists (default: false)\nstartbin::Int: Starting bin for analysis (default: 2)\nendbin::Union{Int,Nothing}: Ending bin for analysis (default: all bins)\ndropmaxmin::Int: Number of max/min values to drop (default: 0)\nauto_digits::Bool: Whether to automatically determine significant digits (default: true)\ntolerance::Float64: Tolerance for matching k-points (default: 1e-6)\nverbose::Bool: Whether to output detailed information (default: false)\nfilter_options::Union{Dict, NamedTuple}: Options for filtering parameter directories (default: empty Dict)\n\nReturns\n\nDataFrame: DataFrame containing parameters and CDW correlation ratio results\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.analyze_CDW_structure_factor_multi_parameter","page":"API Reference","title":"DataProcessforDQMC.analyze_CDW_structure_factor_multi_parameter","text":"analyze_CDW_structure_factor_multi_parameter(base_dir::AbstractString=pwd(); \n                                           k_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                                           filename::String=\"cdwpair_sf_k.bin\",\n                                           force_rebuild::Bool=false,\n                                           source_file::String=\"cdwpair_k.bin\",\n                                           startbin::Int=2, \n                                           endbin::Union{Int,Nothing}=nothing, \n                                           dropmaxmin::Int=0,\n                                           auto_digits::Bool=true, \n                                           tolerance::Float64=1e-6, \n                                           verbose::Bool=false,\n                                           filter_options::Union{Dict, NamedTuple}=Dict()) -> DataFrame\n\n对多个参数目录执行电荷密度波结构因子分析，并将结果整合到一个DataFrame中。\n\n参数\n\nbase_dir::AbstractString=pwd(): 基础目录路径，默认为当前工作目录\nk_point::Tuple{<:Real,<:Real}=(0.0, 0.0): 要分析的k点\nfilename::String=\"cdwpair_sf_k.bin\": 要分析的结构因子文件名\nforce_rebuild::Bool=false: 是否强制重新构建结构因子文件\nsource_file::String=\"cdwpair_k.bin\": 当 filename 不存在时，用于生成结构因子的源文件名\nstartbin::Int=2: 起始bin编号\nendbin::Union{Int,Nothing}=nothing: 结束bin编号\ndropmaxmin::Int=0: 丢弃的最大/最小值数量\nauto_digits::Bool=true: 是否自动确定有效数字\ntolerance::Float64=1e-6: k点匹配容差\nverbose::Bool=false: 是否显示详细信息\nfilter_options::Union{Dict, NamedTuple}=Dict(): 目录筛选选项，可包含:prefix、:b、:U等参数\n\n返回值\n\nDataFrame: 包含所有参数和分析结果的DataFrame\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.analyze_correlation_ratio_multi_parameter","page":"API Reference","title":"DataProcessforDQMC.analyze_correlation_ratio_multi_parameter","text":"analyze_correlation_ratio_multi_parameter(correlation_ratio_function::Function,\n                                       base_dir::AbstractString=pwd(); \n                                       shift_point::Tuple{<:Real,<:Real}=(0.25, 0.0),\n                                       Q_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                                       filename::String=\"afm_sf_k.bin\",\n                                       source_file::String=\"spsm_k.bin\",\n                                       result_columns::Vector{Symbol}=[:correlation_ratio, :err_correlation_ratio],\n                                       result_prefix::String=\"R\",\n                                       force_rebuild::Bool=false,\n                                       startbin::Int=2,\n                                       endbin::Union{Int,Nothing}=nothing,\n                                       dropmaxmin::Int=0,\n                                       auto_digits::Bool=true,\n                                       tolerance::Float64=1e-6,\n                                       verbose::Bool=false,\n                                       filter_options::Union{Dict, NamedTuple}=Dict()) -> DataFrame\n\nGeneric multi-parameter correlation ratio analysis function, suitable for analyzing different types of correlation ratios.\n\nParameters\n\ncorrelation_ratio_function::Function: Function for analyzing correlation ratio, such as AFMCorrelationRatio or CDWCorrelationRatio\nbase_dir::AbstractString: Base directory containing parameter directories (default: current directory)\nshift_point::Tuple{<:Real,<:Real}: Momentum space shift (δqx, δqy) (default: (0.25, 0.0))\nQ_point::Tuple{<:Real,<:Real}: Ordering vector Q (default: (0.0, 0.0))\nfilename::String: Structure factor file name (default: \"afmsfk.bin\")\nsource_file::String: Source file to generate structure factor if not exists (default: \"spsm_k.bin\")\nresult_columns::Vector{Symbol}: Columns to include in results (default: [:correlationratio, :errcorrelation_ratio])\nresult_prefix::String: Prefix for result column names (default: \"R\")\nforce_rebuild::Bool: Force rebuild structure factor file even if exists (default: false)\nstartbin::Int: Starting bin for analysis (default: 2)\nendbin::Union{Int,Nothing}: Ending bin for analysis (default: all bins)\ndropmaxmin::Int: Number of max/min values to drop (default: 0)\nauto_digits::Bool: Whether to automatically determine significant digits (default: true)\ntolerance::Float64: Tolerance for matching k-points (default: 1e-6)\nverbose::Bool: Whether to output detailed information (default: false)\nfilter_options::Union{Dict, NamedTuple}: Options for filtering parameter directories (default: empty Dict)\n\nReturns\n\nDataFrame: DataFrame containing parameters and correlation ratio results\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.analyze_structure_factor_multi_parameter","page":"API Reference","title":"DataProcessforDQMC.analyze_structure_factor_multi_parameter","text":"analyze_structure_factor_multi_parameter(analyzer_function::Function,\n                                       base_dir::AbstractString=pwd(); \n                                       k_point::Tuple{<:Real,<:Real}=(0.0, 0.0),\n                                       filename::String=\"afm_sf_k.bin\",\n                                       force_rebuild::Bool=false,\n                                       source_file::String=\"spsm_k.bin\",\n                                       result_columns::Vector{Symbol}=[:S_real, :S_real_err, :S_imag, :S_imag_err],\n                                       result_prefix::String=\"S\",\n                                       startbin::Int=2, \n                                       endbin::Union{Int,Nothing}=nothing, \n                                       dropmaxmin::Int=0,\n                                       auto_digits::Bool=true, \n                                       tolerance::Float64=1e-6, \n                                       verbose::Bool=false,\n                                       filter_options::Union{Dict, NamedTuple}=Dict()) -> DataFrame\n\n通用的多参数结构因子分析函数，可用于分析不同类型的结构因子。\n\n参数\n\nanalyzer_function::Function: 用于分析结构因子的函数，如 AFMStructureFactor 或 CDWStructureFactor\nbase_dir::AbstractString=pwd(): 基础目录路径，默认为当前工作目录\nk_point::Tuple{<:Real,<:Real}=(0.0, 0.0): 要分析的k点\nfilename::String=\"afm_sf_k.bin\": 要分析的结构因子文件名\nforce_rebuild::Bool=false: 是否强制重新构建结构因子文件\nsource_file::String=\"spsm_k.bin\": 当 filename 不存在时，用于生成结构因子的源文件名\nresult_columns::Vector{Symbol}: 结果列的名称，默认为 [:Sreal, :Srealerr, :Simag, :Simagerr]\nresult_prefix::String: 结果列名称的前缀，如 \"SAF\" 或 \"SCDW\"\nstartbin::Int=2: 起始bin编号\nendbin::Union{Int,Nothing}=nothing: 结束bin编号\ndropmaxmin::Int=0: 丢弃的最大/最小值数量\nauto_digits::Bool=true: 是否自动确定有效数字\ntolerance::Float64=1e-6: k点匹配容差\nverbose::Bool=false: 是否显示详细信息\nfilter_options::Union{Dict, NamedTuple}=Dict(): 目录筛选选项，可包含:prefix、:b、:U等参数\n\n返回值\n\nDataFrame: 包含所有参数和分析结果的DataFrame\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.batch_migrate_directories","page":"API Reference","title":"DataProcessforDQMC.batch_migrate_directories","text":"batch_migrate_directories(base_dir::AbstractString=pwd(); \n                         pattern::Regex=r\"^proj_fft_honeycomb\",\n                         dry_run::Bool=true,\n                         action::String=\"mv\") -> Vector{Tuple{String,String,Bool}}\n\n批量迁移目录下的legacy格式文件夹名到新格式。\n\n参数\n\nbase_dir::AbstractString=pwd(): 基础目录路径，默认为当前工作目录\npattern::Regex=r\"^proj_fft_honeycomb\": 用于匹配需要迁移的目录名的正则表达式\ndry_run::Bool=true: 是否为试运行模式（只显示将要进行的操作，不实际执行）\naction::String=\"mv\": 执行的操作类型\n\"mv\": 重命名目录（默认）\n\"cp\": 复制目录到新名称，保留原目录\n\"rm\": 删除原目录（需要先用\"cp\"创建新目录）\n\n返回值\n\nVector{Tuple{String,String,Bool}}: 迁移结果列表，每个元组包含 (原名, 新名, 是否成功)\n\n示例\n\n# 试运行，查看将要进行的迁移\nresults = batch_migrate_directories(dry_run=true)\n\n# 复制到新格式，保留原目录\nresults = batch_migrate_directories(dry_run=false, action=\"cp\")\n\n# 重命名到新格式\nresults = batch_migrate_directories(dry_run=false, action=\"mv\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.bin_filter-Tuple{DataFrames.DataFrame}","page":"API Reference","title":"DataProcessforDQMC.bin_filter","text":"bin_filter(df::DataFrame)\n\nRemove the first ntherm bins from df. df should have a column named bin.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.calculate_i_coord-NTuple{4, Any}","page":"API Reference","title":"DataProcessforDQMC.calculate_i_coord","text":"Calculate i coordinate from imj when j is fixed at (1,1)\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.calculate_statistics-Tuple{Any, Any}","page":"API Reference","title":"DataProcessforDQMC.calculate_statistics","text":"calculate_statistics(df, auto_digits; input_coord_columns=[:imj_x, :imj_y], output_coord_names=[:imj_x, :imj_y], orbital_labels=nothing)\n\n通用函数，计算DataFrame中每个坐标的统计信息。 该函数可用于实空间和k空间数据，支持单轨道和多轨道数据。\n\n参数:\n\ndf: 包含bin信息的DataFrame\nauto_digits: 是否使用自动精度进行误差计算\ninput_coord_columns: 输入DataFrame中提取坐标值的列 (例如, [:imjx, :imjy] 或 [:kx, :ky])\noutput_coord_names: 输出DataFrame中使用的坐标列名称\norbital_labels: 轨道标签数组。如果为nothing，则处理单轨道数据（使用realval和imagval列）\n\n返回:\n\n包含每个坐标统计信息的DataFrame\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.cdwpair_k_files_generation","page":"API Reference","title":"DataProcessforDQMC.cdwpair_k_files_generation","text":"cdwpair_k_files_generation(dir::AbstractString=pwd(); cdwpair_source::String=\"cdwpair_k.bin\", verbose::Bool=true)\n\n生成目录中与电荷密度波和配对相关的衍生数据文件。\n\n参数\n\ndir::AbstractString: 数据目录，默认为当前工作目录\ncdwpair_source::String: 用于生成CDW配对结构因子的源文件名，默认为\"cdwpair_k.bin\"\nverbose::Bool: 是否输出详细信息，默认为true\n\n返回值\n\nDict{String, String}: 包含生成的文件路径的字典，键为文件名，值为完整路径\n\n示例\n\n# 使用默认设置生成CDW和配对相关文件\nfiles = cdwpair_k_files_generation()\n\n# 指定目录和源文件\nfiles = cdwpair_k_files_generation(\"/path/to/data\", cdwpair_source=\"custom_cdwpair_k.bin\", verbose=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.combine_bin_files","page":"API Reference","title":"DataProcessforDQMC.combine_bin_files","text":"combine_bin_files(output_filename::String,\n                  input_files::Vector{<:Tuple{<:AbstractString, <:Real}},\n                  output_dir::String=pwd(),\n                  input_dir::String=pwd();\n                  preserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2,\n                  operation::Function=+,\n                  verbose::Bool=false)\n\n将多个具有类似结构的二进制数据文件按权重组合成一个新文件。\n\n参数\n\noutput_filename::String: 输出文件名\ninput_files::Vector{Tuple{String, Real}}: 输入文件名和权重的元组数组，如 [(\"spsmk.bin\", 0.5), (\"szszk.bin\", 1.0)]\noutput_dir::String=pwd(): 输出文件目录\ninput_dir::String=pwd(): 输入文件目录\npreserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2: 保持不变的列索引（默认前两列，通常是坐标）\noperation::Function=+: 组合操作函数（默认为加法）\nverbose::Bool=false: 是否输出详细信息\n\n返回值\n\nString: 生成的文件完整路径\n\n示例\n\n# 合并 spsm_k.bin 和 szsz_k.bin 文件，权重分别为 0.5 和 1.0\ncombined_file = combine_bin_files(\n    \"ss_k.bin\",\n    [(\"spsm_k.bin\", 1.0), (\"szsz_k.bin\", 1.0)]\n)\n\n# 合并实空间关联函数文件，保持前3列不变\ncombined_file = combine_bin_files(\n    \"ss_r.bin\", \n    [(\"spsm_r.bin\", 1.0), (\"szsz_r.bin\", 1.0)],\n    preserve_columns=1:3\n)\n\n# 使用乘法而不是加法合并文件\ncombined_file = combine_bin_files(\n    \"product.bin\",\n    [(\"file1.bin\", 1.0), (\"file2.bin\", 1.0)],\n    operation=*\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.combine_cdwpair_components","page":"API Reference","title":"DataProcessforDQMC.combine_cdwpair_components","text":"combine_cdwpair_components(\n    output_filename::String=\"cdwpair_k.bin\",\n    cdw_filename::String=\"cdw_k.bin\",\n    pair_filename::String=\"pair_onsite_k.bin\",\n    output_dir::String=pwd(),\n    input_dir::String=pwd(),\n    cdw_weight::Real=1.0,\n    pair_weight::Real=2.0;\n    preserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2,\n    verbose::Bool=true\n)\n\n将CDW关联和配对关联合并为一个整体结构因子（假设了eta-SU（2）对称性）。 如果CDW关联文件不存在，会自动从密度-密度关联文件创建。\n\n参数\n\noutput_filename::String=\"cdwpair_k.bin\": 输出文件名\ncdw_filename::String=\"cdw_k.bin\": CDW关联文件名\npair_filename::String=\"pair_onsite_k.bin\": 配对关联文件名\noutput_dir::String=pwd(): 输出文件目录\ninput_dir::String=pwd(): 输入文件目录\ncdw_weight::Real=1.0: CDW关联的权重（默认为1.0）\npair_weight::Real=2.0: 配对关联的权重（默认为2.0）\npreserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2: 保持不变的列索引（默认前两列，通常是k点坐标）\nverbose::Bool=true: 是否输出详细信息\n\n返回值\n\nString: 生成的文件完整路径\n\n示例\n\n# 合并CDW和配对关联\ncombined_file = combine_cdwpair_components(\"cdwpair_k.bin\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.combine_ss_components","page":"API Reference","title":"DataProcessforDQMC.combine_ss_components","text":"combine_ss_components(\n    output_filename::String=\"ss_k.bin\",\n    spsm_filename::String=\"spsm_k.bin\",\n    szsz_filename::String=\"szsz_k.bin\",\n    output_dir::String=pwd(),\n    input_dir::String=pwd(),\n    xy_weight::Real=1.0,\n    zz_weight::Real=1.0;\n    preserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2,\n    verbose::Bool=true\n)\n\n合并 XY 和 Z 分量的自旋相关函数数据文件。\n\n参数\n\noutput_filename::String=\"ss_k.bin\": 输出文件名\nspsm_filename::String=\"spsm_k.bin\": XY分量文件名\nszsz_filename::String=\"szsz_k.bin\": Z分量文件名\noutput_dir::String=pwd(): 输出文件目录\ninput_dir::String=pwd(): 输入文件目录\nxy_weight::Real=1.0: XY分量的权重\nzz_weight::Real=1.0: Z分量的权重\npreserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2: 保持不变的列索引\nverbose::Bool=true: 是否输出详细信息\n\n返回值\n\nString: 生成的文件完整路径或者空字符串\n\n示例\n\n# 合并 k 空间的 XY 和 Z 分量\ncombined_file = combine_ss_components(\n    \"ss_k.bin\",\n    \"spsm_k.bin\",\n    \"szsz_k.bin\"\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.compute_stats-Tuple{Any, Any}","page":"API Reference","title":"DataProcessforDQMC.compute_stats","text":"compute_stats(real_values, imag_values; auto_digits=true)\n\n计算复数数据的统计量（平均值、误差和格式化字符串）。\n\n参数:\n\nreal_values: 实部值数组\nimag_values: 虚部值数组\nauto_digits: 是否自动确定有效数字 (默认: true)\n\n返回:\n\n包含以下字段的命名元组:\nmean_real, mean_imag: 平均值（实部和虚部）\nerr_real, err_imag: 误差（实部和虚部）\nformatted_real, formatted_imag: 格式化后的结果字符串\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.create_cdw_from_nn","page":"API Reference","title":"DataProcessforDQMC.create_cdw_from_nn","text":"create_cdw_from_nn(\n    output_filename::String=\"cdw_k.bin\",\n    input_filename::String=\"nn_k.bin\",\n    output_dir::String=pwd(),\n    input_dir::String=pwd();\n    preserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2,\n    verbose::Bool=true\n)\n\n将密度密度关联数据(nnk.bin)转换为CDW关联数据。 应用ηα ηβ因子到对应的轨道，其中ηα是+1（α=A轨道）或-1（α=B轨道）。\n\n参数\n\noutput_filename::String=\"cdw_k.bin\": 输出文件名\ninput_filename::String=\"nn_k.bin\": 输入密度-密度关联文件名\noutput_dir::String=pwd(): 输出文件目录\ninput_dir::String=pwd(): 输入文件目录\npreserve_columns::Union{Vector{Int}, UnitRange{Int}}=1:2: 保持不变的列索引（默认前两列，通常是k点坐标）\nverbose::Bool=true: 是否输出详细信息\n\n返回值\n\nString: 生成的文件完整路径\n\n示例\n\n# 创建CDW关联文件\ncdw_file = create_cdw_from_nn(\"cdw_k.bin\", \"nn_k.bin\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.error-Tuple{Any}","page":"API Reference","title":"DataProcessforDQMC.error","text":"error(data; sigma=1, bessel=true, auto_digits=false)\n\nCalculate the standard error of the data.\n\nArguments:\n\ndata: The data array\nsigma: Number of standard deviations (default: 1)\nbessel: Whether to use Bessel's correction (N-1) for sample standard deviation (default: true)\nauto_digits: Whether to automatically determine significant digits based on error of error (default: true)\n\nReturns:\n\nStandard error multiplied by sigma, with appropriate precision if auto_digits=true\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.error_ns-Tuple{Any}","page":"API Reference","title":"DataProcessforDQMC.error_ns","text":"error_ns(data)\n\nerror without spikes: Calculate the error of the data after removing the largest and smallest value. #!deprecated\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.euclidean_distance-Tuple{Any, Any}","page":"API Reference","title":"DataProcessforDQMC.euclidean_distance","text":"Calculate Euclidean distance between two points\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.export_bin_to_csv","page":"API Reference","title":"DataProcessforDQMC.export_bin_to_csv","text":"export_bin_to_csv(\n    input_file::String,\n    dir::String=pwd();\n    output_dir::Union{String, Nothing}=nothing,\n    output_file::Union{String, Nothing}=nothing,\n    kwargs...\n)\n\nExport a bin file to CSV format.\n\nArguments\n\ninput_file::String: Input .bin file name\ndir::String=pwd(): Directory containing the bin file\noutput_dir::Union{String, Nothing}=nothing: Output directory (defaults to dir/exported_csv)\noutput_file::Union{String, Nothing}=nothing: Output filename (defaults to input_file with .csv extension)\nkwargs...: Additional arguments passed to export_bin_to_dataframe\n\nReturns\n\nString: Path to the exported CSV file\n\nExamples\n\n# Export to default location (data/exported_csv/)\ncsv_file = export_bin_to_csv(\"nn_k.bin\", dir=\"data/\")\n\n# Export to custom location\ncsv_file = export_bin_to_csv(\"nn_k.bin\", dir=\"data/\", output_dir=\"results/\")\n\n# Export with custom filename\ncsv_file = export_bin_to_csv(\"nn_k.bin\", output_file=\"correlation_nn.csv\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.export_bin_to_dataframe","page":"API Reference","title":"DataProcessforDQMC.export_bin_to_dataframe","text":"export_bin_to_dataframe(\n    input_file::String,\n    dir::String=pwd();\n    iscorrelation::Bool=true,\n    orbital_columns::Union{Vector{Tuple{Int,Int}}, Nothing}=nothing,\n    orbital_labels::Union{Vector{String}, Nothing}=nothing\n)\n\nConvert a bin file to a DataFrame with bin index column.\n\nThis function reads a bin file and converts it to a DataFrame format suitable for analysis and visualization. It automatically detects the file structure (k-space vs r-space) and handles both multi-orbital and single-column data.\n\nArguments\n\ninput_file::String: Input .bin file name\ndir::String=pwd(): Directory containing the bin file\niscorrelation::Bool=true: Whether to interpret the file as a correlation function (coordinates + real/imag pairs)\norbital_columns::Union{Vector{Tuple{Int,Int}}, Nothing}=nothing: Column indices for each orbital pair (real, imag). Auto-generated when nothing\norbital_labels::Union{Vector{String}, Nothing}=nothing: Labels for each orbital pair (defaults to AA/AB/... or pair1/pair2/...)\n\nReturns\n\nDataFrame: Converted data with columns: bin, coord1, coord2, data columns...\n\nData Structure\n\nThe function handles multiple formats:\n\nMulti-orbital (default 10 columns): kx, ky, AAreal, AAimag, ABreal, ABimag, BAreal, BAimag, BBreal, BBimag\nNote: AA, AB, BA, BB represent orbital pairs in two-point correlation functions <c†{i,α} c{j,β}>\nCustom orbital pairs: Specify any number of orbital pairs via orbital_columns and orbital_labels\nSingle column (4 columns): kx, ky, valuereal, valueimag\n\nExamples\n\n# Export k-space correlation function (default 4 orbital pairs: AA, AB, BA, BB)\ndf = export_bin_to_dataframe(\"nn_k.bin\", dir=\"data/\")\n\n# Export only diagonal orbital pairs (AA and BB)\ndf = export_bin_to_dataframe(\"nn_k.bin\", \n    orbital_columns=[(3,4), (9,10)],\n    orbital_labels=[\"AA\", \"BB\"])\n\n# Export r-space correlation function\ndf = export_bin_to_dataframe(\"nn_r.bin\", dir=\"data/\")\n\n# Export AFM structure factor (single column)\ndf = export_bin_to_dataframe(\"afm_sf_k.bin\", dir=\"data/\", iscorrelation=true, orbital_columns=[(3,4)], orbital_labels=[\"value\"])\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.export_bin_to_jld2","page":"API Reference","title":"DataProcessforDQMC.export_bin_to_jld2","text":"export_bin_to_jld2(\n    input_file::String,\n    dir::String=pwd();\n    output_dir::Union{String, Nothing}=nothing,\n    output_file::Union{String, Nothing}=nothing,\n    dataset_name::Union{String, Nothing}=nothing,\n    kwargs...\n)\n\nExport a bin file to JLD2 format.\n\nArguments\n\ninput_file::String: Input .bin file name\ndir::String=pwd(): Directory containing the bin file\noutput_dir::Union{String, Nothing}=nothing: Output directory (defaults to dir/exported_jld2)\noutput_file::Union{String, Nothing}=nothing: Output filename (defaults to input filename with .jld2 extension, e.g., nn_k.jld2)\ndataset_name::Union{String, Nothing}=nothing: Dataset name in JLD2 file (defaults to base filename, e.g., \"nn_k\")\nkwargs...: Additional arguments passed to export_bin_to_dataframe\n\nReturns\n\nString: Path to the exported JLD2 file\n\nExamples\n\n# Export to default JLD2 file (nn_k.jld2 with dataset \"nn_k\")\njld2_file = export_bin_to_jld2(\"nn_k.bin\", dir=\"data/\")\n# Creates: data/exported_jld2/nn_k.jld2 (dataset: \"nn_k\")\n# Read: load(\"nn_k.jld2\", \"nn_k\")\n\n# Export to custom JLD2 file\njld2_file = export_bin_to_jld2(\"nn_k.bin\", output_file=\"correlations.jld2\")\n# Creates: correlations.jld2 (dataset: \"nn_k\")\n\n# Multiple datasets in one file (if needed)\nexport_bin_to_jld2(\"nn_k.bin\", output_file=\"all_data.jld2\")  # dataset: \"nn_k\"\nexport_bin_to_jld2(\"nn_r.bin\", output_file=\"all_data.jld2\")  # dataset: \"nn_r\"\n# Read: load(\"all_data.jld2\", \"nn_k\") or load(\"all_data.jld2\", \"nn_r\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.export_directory_bins","page":"API Reference","title":"DataProcessforDQMC.export_directory_bins","text":"export_directory_bins(\n    dir::String=pwd();\n    file_patterns::Vector{String}=[\"*_k.bin\", \"*_r.bin\"],\n    output_format::Symbol=:both,\n    output_dir::Union{String, Nothing}=nothing,\n    verbose::Bool=true,\n    iscorrelation::Union{Bool,Nothing}=nothing,\n    orbital_columns::Union{Vector{Tuple{Int,Int}}, Nothing}=nothing,\n    orbital_labels::Union{Vector{String}, Nothing}=nothing\n)\n\nBatch export all matching bin files in a directory.\n\nArguments\n\ndir::String=pwd(): Directory containing bin files\nfile_patterns::Vector{String}=[\"*_k.bin\", \"*_r.bin\"]: Glob patterns for files to export\noutput_format::Symbol=:both: Output format (:csv, :jld2, or :both) - default is :both\noutput_dir::Union{String, Nothing}=nothing: Output directory\nverbose::Bool=true: Print progress information\niscorrelation::Union{Bool,Nothing}=nothing: Whether files should be treated as correlation data. nothing enables auto-detection based on filename (contains _k or _r).\norbital_columns::Union{Vector{Tuple{Int,Int}}, Nothing}=nothing: Optional orbital column mapping passed to export functions (used when iscorrelation is true).\norbital_labels::Union{Vector{String}, Nothing}=nothing: Optional orbital labels passed to export functions (used when iscorrelation is true).\n\nReturns\n\nVector{String}: Paths to exported files\n\nExamples\n\n# Export all k-space and r-space correlation files to both CSV and JLD2 (default)\nexport_directory_bins(\"data/\")\n\n# Export only to CSV\nexport_directory_bins(\"data/\", output_format=:csv)\n\n# Export only k-space files\nexport_directory_bins(\"data/\", file_patterns=[\"*_k.bin\"])\n\n# Export with custom output directory\nexport_directory_bins(\"data/\", output_dir=\"results/\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.filter","page":"API Reference","title":"DataProcessforDQMC.filter","text":"Remove the max and min of the data\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.filter_bin_file-Tuple{String, Union{Tuple{Float64, Float64}, Tuple{Int64, Int64}}}","page":"API Reference","title":"DataProcessforDQMC.filter_bin_file","text":"filter_bin_file(\n    input_filename::String,\n    coordinate::Union{Tuple{Int, Int}, Tuple{Float64, Float64}};\n    output_filename::Union{String, Nothing}=nothing,\n    dir::String=pwd(),\n    tolerance::Float64=1e-6,\n    verbose::Bool=false\n)\n\nExtract all bin data for a specific coordinate from a bin file.\n\nThis function filters a bin file to extract only the rows corresponding to a specific  coordinate across all bins. The coordinate can be either:\n\nk-space (momentum): Tuple{Float64, Float64}, e.g., (0.5, 0.5)\nr-space (real space): Tuple{Int, Int}, e.g., (1, 2)\n\nArguments\n\ninput_filename::String: Input .bin file (e.g., \"nnk.bin\", \"nnr.bin\")\ncoordinate::Union{Tuple{Int, Int}, Tuple{Float64, Float64}}: Target coordinate\noutput_filename::Union{String, Nothing}=nothing: Output .bin file name. If nothing, auto-generate from coordinate\ndir::String=pwd(): Working directory\ntolerance::Float64=1e-6: Tolerance for k-space coordinate matching (ignored for r-space)\nverbose::Bool=false: Whether to print verbose information\n\nReturns\n\nString: Path to output file, or empty string if failed\n\nExamples\n\n# Filter k-space data for k=(π,π)\nfilter_bin_file(\"nn_k.bin\", (0.5, 0.5), dir=\"/path/to/data\")\n# Output: nn_k_0.500_0.500.bin\n\n# Filter r-space data for r=(1, 2)\nfilter_bin_file(\"nn_r.bin\", (1, 2), dir=\"/path/to/data\")\n# Output: nn_r_1_2.bin\n\n# Custom output filename\nfilter_bin_file(\"afm_sf_k.bin\", (0.5, 0.5), output_filename=\"afm_pi_pi.bin\")\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.filter_bins-Tuple{DataFrames.DataFrame, Int64, Union{Nothing, Int64}, Int64, Int64, Bool}","page":"API Reference","title":"DataProcessforDQMC.filter_bins","text":"filter_bins(df, startbin, endbin, dropmaxmin, n_bins, verbose; value_columns=[:real_val, :imag_val])\n\n通用bin过滤函数，支持实空间和k空间数据。\n\n参数\n\ndf: 输入DataFrame\nstartbin: 起始bin\nendbin: 结束bin\ndropmaxmin: 丢弃的最大最小值数量 （bin大小的metric为所有坐标，所有value_columns的平均值）\nn_bins: 总bin数\nverbose: 是否打印详细信息\nvalue_columns: 用于过滤的数值列，默认为[:realval, :imagval]\n\n过滤逻辑\n\n该函数按 bin 进行过滤，对每个 bin 计算其所有数据点的平均值，然后排序并丢弃最大/最小的 bin。这确保了在保留数据空间完整性的同时，去除了时间上的离群值。\n\n返回\n\n过滤后的DataFrame\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.find_closest_k_point-Tuple{Vector{<:Tuple{var\"#s9\", var\"#s10\"} where {var\"#s9\"<:Real, var\"#s10\"<:Real}}, Tuple{Real, Real}, Float64}","page":"API Reference","title":"DataProcessforDQMC.find_closest_k_point","text":"find_closest_k_point(k_points, target_k, tolerance)\n\nFind the closest k-point in a set of k-points to a target k-point.\n\nArguments\n\nk_points::Vector{<:Tuple{<:Real,<:Real}}: Vector of k-point coordinates [(kx1, ky1), (kx2, ky2), ...]\ntarget_k::Tuple{<:Real,<:Real}: Target k-point (kx, ky)\ntolerance::Float64: Tolerance for matching k-points\n\nReturns\n\nTuple{Real, Real}: Closest k-point coordinates (kx, ky)\nBool: Whether it's an exact match (distance <= tolerance)\nFloat64: Distance to the target k-point\n\nExample\n\nk_points = [(0.0, 0.0), (0.5, 0.0), (0.5, 0.5)]\ntarget = (0.49, 0.51)\nclosest_k, exact_match, distance = find_closest_k_point(k_points, target, 0.1)\n# Returns: ((0.5, 0.5), true, 0.014...)\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.find_coordinate_index","page":"API Reference","title":"DataProcessforDQMC.find_coordinate_index","text":"find_coordinate_index(coords, target_coord, tolerance)\n\nFind the index of a coordinate in a coordinate matrix.\n\nThis function handles both r-space (integer) and k-space (float) coordinates:\n\nFor r-space (integer tuples): exact integer matching\nFor k-space (float tuples): nearest neighbor matching with tolerance\n\nArguments\n\ncoords::Matrix: Matrix of coordinates (Nx2, first two columns of bin file)\ntarget_coord::Union{Tuple{Int, Int}, Tuple{Float64, Float64}}: Target coordinate\ntolerance::Float64=1e-6: Tolerance for k-space matching (ignored for r-space)\n\nReturns\n\nUnion{Int, Nothing}: Index of the coordinate (1-based), or Nothing if not found\nBool: Whether the match is exact (k-space) or found (r-space)\n\nExamples\n\n# R-space example\ncoords = [1.0 1.0; 1.0 2.0; 2.0 1.0]\nidx, exact = find_coordinate_index(coords, (1, 2), 1e-6)\n# Returns: (2, true)\n\n# K-space example\ncoords = [0.0 0.0; 0.5 0.0; 0.5 0.5]\nidx, exact = find_coordinate_index(coords, (0.49, 0.51), 0.1)\n# Returns: (3, true)  # distance = 0.014 < 0.1\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.format_edgerdata-Tuple{String, String}","page":"API Reference","title":"DataProcessforDQMC.format_edgerdata","text":"format_edgerdata(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for r-dependent data along the edge of a cylinder with each row corresponding to a bin and a spatial position.  The spatial position is from 1 to L/2, where L is the length of the edge (typically an even number). Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. In the .csv file, the first column is the bin index, the second column is the spatial position, and the third column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_edgerfulldata-Tuple{String, String}","page":"API Reference","title":"DataProcessforDQMC.format_edgerfulldata","text":"format_edgerfulldata(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for r-dependent data along the edge of a cylinder with each row corresponding to a bin and a spatial position.  Contain all the two-point correlation information between all points along the same edges. Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. In the .csv file, the first column is the bin index, the second column is the edge number,  the third column is the starting point i, the fourth column is the distance from i,  and the fifth column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_energy-Tuple{String, Vector{String}}","page":"API Reference","title":"DataProcessforDQMC.format_energy","text":"format_energy(data_dir::String, energy_list::Array{String,1})\n\nFormat the energy.bin in data_dir into a dataframe and store it in a .csv and .toml file.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_expRenyi_2p_edge-Tuple{String}","page":"API Reference","title":"DataProcessforDQMC.format_expRenyi_2p_edge","text":"format_expRenyi_2p_edge(data_dir::String)\n\nFormat the expRenyiN2_2p_edge.bin and expRenyiSth_2p_edge.bin in data_dir into a dataframe and store it in a .csv and .toml file.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_kdata-Tuple{String, String}","page":"API Reference","title":"DataProcessforDQMC.format_kdata","text":"format_kdata(data_dir::String, obsname::String; ifsave::Bool = false)\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_onecol-Tuple{String, String}","page":"API Reference","title":"DataProcessforDQMC.format_onecol","text":"format_onecol(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for one-column data with each row corresponding to a bin. Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. In the .csv file, the first column is the bin index, and the second column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_pair_onsite_alledges-Tuple{String}","page":"API Reference","title":"DataProcessforDQMC.format_pair_onsite_alledges","text":"format_pair_onsite_alledges(data_dir::String)\n\nFormat the pair_onsite_alledges.bin, pair_onsite_interedges.bin and pair_onsite_intraedges.bin in data_dir into a dataframe and store it in a .csv and .toml file.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_pair_onsite_r-Tuple{String, Int64}","page":"API Reference","title":"DataProcessforDQMC.format_pair_onsite_r","text":"format_pair_onsite_r(data_dir::String, L::Int)\n\nFormat the pair_onsite_r.bin in data_dir into a dataframe and store it in a .csv and .toml file. For now, only support one sublattice system. This function support old-fashioned output data, i.e., only output the values without the coordinates, so users need to specify the lattice size L. Just a compatibility function for old-fashioned output, and will be deprecated in the future.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_rdata-Tuple{String, String}","page":"API Reference","title":"DataProcessforDQMC.format_rdata","text":"format_rdata(data_dir::String, obsname::String; ifsave::Bool = false)\n\nA generic formatter for r-dependent data with each row corresponding to a bin and a spatial position. Format the obsname.bin in data_dir into a dataframe and store it in a .csv and .toml file. For now, only support 2D system with one sublattice. In the .csv file, the first column is the bin index, the second and third columns are the x and y coordinates, and the fourth column is the value of the observable.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.format_value_error","page":"API Reference","title":"DataProcessforDQMC.format_value_error","text":"format_value_error(value, error, error_sig_digits=1)\n\nFormat a value and its error with appropriate precision using scientific notation.\n\nThe error is formatted to the specified number of significant digits. The value is rounded to match the precision of the error.\n\nArguments:\n\nvalue: The main value to format\nerror: The error/uncertainty of the value\nerror_sig_digits: Number of significant digits to use for the error (default: 1)\n\nReturns:\n\nTuple of (formattedvalue, formattederror) as strings in scientific notation\n\nExamples:\n\n# Default 1 significant digit for error\nformat_value_error(2.36738, 0.0023)     # Returns (\"2.367e+00\", \"0.003e0\")\nformat_value_error(2.36738, 0.00023)    # Returns (\"2.3674e+00\", \"0.0003e0\")\n\n# With 2 significant digits for error\nformat_value_error(2.36738, 0.0023, 2)  # Returns (\"2.3674e+00\", \"0.0023e0\")\n\n# Large numbers\nformat_value_error(2367.38, 23)         # Returns (\"2.37e+03\", \"0.03e3\")\nformat_value_error(2367.38, 23, 2)      # Returns (\"2.367e+03\", \"0.023e3\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.generate_all_derived_files","page":"API Reference","title":"DataProcessforDQMC.generate_all_derived_files","text":"generate_all_derived_files(dir::AbstractString=pwd();\n                           afm_source::String=\"ss_k.bin\", \n                           cdwpair_source::String=\"cdwpair_k.bin\", \n                           verbose::Bool=true)\n\n生成目录中所有衍生数据文件，包括反铁磁和电荷密度波/配对相关的文件。\n\n参数\n\ndir::AbstractString=pwd(): 数据目录，默认为当前目录\nafm_source::String=\"ss_k.bin\": 用于生成反铁磁结构因子的源文件名，默认为\"ss_k.bin\"\ncdwpair_source::String=\"cdwpair_k.bin\": 用于生成CDW配对结构因子的源文件名，默认为\"cdwpair_k.bin\"\nverbose::Bool=true: 是否输出详细信息，默认为true\n\n返回值\n\nDict{String, String}: 包含生成的文件路径的字典，键为文件名，值为完整路径\n\n示例\n\n# 在当前目录生成所有衍生数据文件\nfiles = generate_all_derived_files(verbose=true)\n\n# 指定目录和源文件\nfiles = generate_all_derived_files(dir=\"/path/to/data\", afm_source=\"spsm_k.bin\", cdwpair_source=\"cdw_k.bin\")\n\n# 如果只需要生成特定类型的文件，可以直接调用相应的函数\nafm_files = afm_k_files_generation(dir, afm_source=\"spsm_k.bin\")\ncdw_files = cdwpair_k_files_generation(dir, cdwpair_source=\"cdw_k.bin\")\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.generate_all_derived_files_recursive","page":"API Reference","title":"DataProcessforDQMC.generate_all_derived_files_recursive","text":"generate_all_derived_files_recursive(base_dir::AbstractString=pwd();\n                                     pattern::Regex=r\".\", \n                                     max_depth::Int=1,\n                                     afm_source::String=\"ss_k.bin\", \n                                     cdwpair_source::String=\"cdwpair_k.bin\", \n                                     verbose::Bool=true)\n\n递归地生成多个目录中的所有衍生数据文件。\n\n参数\n\nbase_dir::AbstractString=pwd(): 基础目录，默认为当前目录\npattern::Regex=r\".\": 用于匹配目录名的正则表达式\nmax_depth::Int=1: 最大递归深度\nafm_source::String=\"ss_k.bin\": 用于生成反铁磁结构因子的源文件名，默认为\"ss_k.bin\"\ncdwpair_source::String=\"cdwpair_k.bin\": 用于生成CDW配对结构因子的源文件名，默认为\"cdwpair_k.bin\"\nverbose::Bool=true: 是否输出详细信息，默认为true\n\n返回值\n\nDict{String, Dict{String, String}}: 包含每个目录生成文件的嵌套字典\n\n示例\n\n# 在当前目录及其子目录中生成所有衍生数据文件\nresults = generate_all_derived_files_recursive(verbose=true)\n\n# 只处理符合特定模式的目录\nresults = generate_all_derived_files_recursive(pattern=r\"^proj_fft_\", verbose=true)\n\n# 递归处理2层目录\nresults = generate_all_derived_files_recursive(max_depth=2, verbose=true)\n\n# 指定源文件\nresults = generate_all_derived_files_recursive(\n    base_dir=\"/path/to/data\",\n    afm_source=\"spsm_k.bin\",\n    cdwpair_source=\"cdw_k.bin\",\n    verbose=true\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.insert_parameters_cols-Tuple{DataFrames.DataFrame, String}","page":"API Reference","title":"DataProcessforDQMC.insert_parameters_cols","text":"insert_parameters_cols(df::DataFrame,data_dir::String)\n\nExact parameters from data_dir and insert them as columns into df. e.g. data_dir = \".../proj_majo_cy.b16.000.U-4.00.Delta_ppm0.4.mu-0.5.L8.dtau0.05/\"  will extract beta, U, Delta_ppm, mu, L and dtau from it.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.k_filter-Tuple{DataFrames.DataFrame, Tuple{Float64, Float64}}","page":"API Reference","title":"DataProcessforDQMC.k_filter","text":"k_filter(df::DataFrame, k::Tuple{Float64,Float64})\n\nFilter the data at k = (kx,ky).\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.mean_ns-Tuple{Any}","page":"API Reference","title":"DataProcessforDQMC.mean_ns","text":"mean_ns(data)\n\nmean without spikes: Calculate the mean of the data after removing the largest and smallest value. #!deprecated\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.merge_afm_sf","page":"API Reference","title":"DataProcessforDQMC.merge_afm_sf","text":"merge_afm_sf(\n    output_file::AbstractString=\"afm_sf_k.bin\",\n    input_file::AbstractString=\"ss_k.bin\",\n    output_dir::AbstractString=pwd(),\n    input_dir::AbstractString=pwd();\n    verbose::Bool=true\n)\n\n计算反铁磁结构因子并保存到文件。\n\n参数\n\noutput_file::AbstractString=\"afm_sf_k.bin\": 输出文件名\ninput_file::AbstractString=\"ss_k.bin\": 输入文件名\noutput_dir::AbstractString=pwd(): 输出文件目录\ninput_dir::AbstractString=pwd(): 输入文件目录\nverbose::Bool=true: 是否显示详细信息\n\n返回值\n\nString: 输出文件的完整路径或者空字符串\n\n示例\n\n# 使用默认设置计算反铁磁结构因子\noutput_path = merge_afm_sf()\n\n# 指定输出和输入文件名及目录\noutput_path = merge_afm_sf(\"my_afm_sf_k.bin\", \"my_ss_k.bin\", \"/output/dir\", \"/input/dir\", verbose=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.merge_bin_columns","page":"API Reference","title":"DataProcessforDQMC.merge_bin_columns","text":"function merge_bin_columns(\n    output_filename::String,\n    input_filename::String,\n    real_columns::Vector{Int},\n    imag_columns::Vector{Int},\n    weights::Vector{Float64}=ones(length(real_columns)),\n    output_dir::String=pwd(),\n    input_dir::String=pwd();\n    preserve_columns::UnitRange{Int}=1:2,\n    verbose::Bool=false\n)\n\n将一个多列数据中的指定列合并为单列，生成新的数据文件。\n\n参数：\n\noutput_filename: 输出文件名\ninput_filename: 输入文件名\nreal_columns: 要合并的实部列索引\nimag_columns: 要合并的虚部列索引\nweights: 每对列的权重，默认全为1.0\noutput_dir: 输出目录，默认为当前目录\ninput_dir: 输入目录，默认为当前目录\npreserve_columns: 要保留的列范围，默认为1:2（通常是k点坐标）\nverbose: 是否输出详细信息，默认为false\n\n返回：\n\n合并后的文件完整路径或者空字符串（如果失败）\n\n示例：\n\n# 合并AA和BB轨道到单列文件\nmerged_file = merge_bin_columns(\n    \"merged.bin\",       # 输出文件名\n    \"spsm_k.bin\",      # 输入文件名\n    [3, 9],           # 实部列（AA和BB轨道的实部）\n    [4, 10],          # 虚部列（AA和BB轨道的虚部）\n    [1.0, 1.0]        # 权重\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.merge_cdw_sf","page":"API Reference","title":"DataProcessforDQMC.merge_cdw_sf","text":"merge_cdw_sf(\n    output_file::AbstractString=\"cdwpair_sf_k.bin\",\n    input_file::AbstractString=\"cdwpair_k.bin\",\n    output_dir::AbstractString=pwd(),\n    input_dir::AbstractString=pwd();\n    verbose::Bool=true\n)\n\n计算电荷密度波结构因子并保存到文件。\n\n参数\n\noutput_file::AbstractString=\"cdwpair_sf_k.bin\": 输出文件名\ninput_file::AbstractString=\"cdwpair_k.bin\": 输入文件名\noutput_dir::AbstractString=pwd(): 输出文件目录\ninput_dir::AbstractString=pwd(): 输入文件目录\nverbose::Bool=true: 是否显示详细信息\n\n返回值\n\nString: 输出文件的完整路径或者空字符串\n\n示例\n\n# 使用默认设置计算电荷密度波结构因子\noutput_path = merge_cdw_sf()\n\n# 指定输出和输入文件名及目录\noutput_path = merge_cdw_sf(\"my_output.bin\", \"my_input.bin\", \"/output/dir\", \"/input/dir\", verbose=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.merge_staggered_components","page":"API Reference","title":"DataProcessforDQMC.merge_staggered_components","text":"merge_staggered_components(\n    output_filename::String=\"afm_sf_k.bin\",\n    input_filename::String=\"ss_k.bin\",\n    output_dir::String=pwd(),\n    input_dir::String=pwd();\n    real_columns::Vector{Int}=[3, 9, 5, 7],  # [AA, BB, AB, BA] 实部列\n    imag_columns::Vector{Int}=[4, 10, 6, 8], # [AA, BB, AB, BA] 虚部列\n    preserve_columns::UnitRange{Int}=1:2,\n    verbose::Bool=false\n)\n\n将多列数据使用交错相位的方式合并，生成新的数据文件。 公式: S = A + B - C - D，其中 A, B, C, D 分别对应数组中的四个列索引。\n\n这种合并方式常用于计算反铁磁结构因子，其中 SAF = AA + BB - AB - BA。 默认的文件名设置（ssk.bin -> afmsfk.bin）反映了这一应用场景。\n\n参数\n\noutput_filename::String=\"afm_sf_k.bin\": 输出文件名\ninput_filename::String=\"ss_k.bin\": 输入文件名\noutput_dir::String=pwd(): 输出目录，默认为当前目录\ninput_dir::String=pwd(): 输入目录，默认为当前目录\nreal_columns::Vector{Int}=[3, 9, 5, 7]: 实部列索引数组，顺序为[A, B, C, D]\nimag_columns::Vector{Int}=[4, 10, 6, 8]: 虚部列索引数组，顺序为[A, B, C, D]\npreserve_columns::UnitRange{Int}=1:2: 要保留的列范围，默认为1:2（通常是k点坐标）\nverbose::Bool=false: 是否输出详细信息，默认为false\n\n返回值\n\n合并后的文件完整路径或者空字符串（如果失败）\n\n示例\n\n# 计算反铁磁结构因子\nafm_sf_file = merge_staggered_components(\n    \"afm_sf_k.bin\",\n    \"ss_k.bin\"\n)\n\n# 自定义列索引\nresult = merge_staggered_components(\n    \"custom_output.bin\",\n    \"custom_input.bin\",\n    real_columns=[3, 5, 7, 9],\n    imag_columns=[4, 6, 8, 10]\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.merge_uniform_components","page":"API Reference","title":"DataProcessforDQMC.merge_uniform_components","text":"merge_uniform_components(\n    output_filename::String=\"cdwpair_sf_k.bin\",\n    input_filename::String=\"cdwpair_k.bin\",\n    output_dir::String=pwd(),\n    input_dir::String=pwd();\n    real_columns::Vector{Int}=[3, 9, 5, 7],  # [A, B, C, D] 实部列\n    imag_columns::Vector{Int}=[4, 10, 6, 8], # [A, B, C, D] 虚部列\n    preserve_columns::UnitRange{Int}=1:2,\n    verbose::Bool=false\n)\n\n将多列数据使用统一相位的方式合并，生成新的数据文件。 公式: S = A + B + C + D，其中 A, B, C, D 分别对应数组中的四个列索引。\n\n这种合并方式常用于计算电荷结构因子，其中 Scharge = AA + BB + AB + BA。 默认的文件名设置（cdwpairk.bin -> cdwpairsfk.bin）反映了这一应用场景。\n\n参数\n\noutput_filename::String=\"cdwpair_sf_k.bin\": 输出文件名\ninput_filename::String=\"cdwpair_k.bin\": 输入文件名\noutput_dir::String=pwd(): 输出目录，默认为当前目录\ninput_dir::String=pwd(): 输入目录，默认为当前目录\nreal_columns::Vector{Int}=[3, 9, 5, 7]: 实部列索引数组，顺序为[A, B, C, D]\nimag_columns::Vector{Int}=[4, 10, 6, 8]: 虚部列索引数组，顺序为[A, B, C, D]\npreserve_columns::UnitRange{Int}=1:2: 要保留的列范围，默认为1:2（通常是k点坐标）\nverbose::Bool=false: 是否输出详细信息，默认为false\n\n返回值\n\n合并后的文件完整路径或者空字符串（如果失败）\n\n示例\n\n# 计算电荷结构因子\ncdwpair_sf_file = merge_uniform_components(\n    \"cdwpair_sf_k.bin\",\n    \"cdwpair_k.bin\"\n)\n\n# 自定义列索引\nresult = merge_uniform_components(\n    \"custom_output.bin\",\n    \"custom_input.bin\",\n    real_columns=[3, 5, 7, 9],\n    imag_columns=[4, 6, 8, 10]\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.print_af_structure_factor_result-NTuple{8, Any}","page":"API Reference","title":"DataProcessforDQMC.print_af_structure_factor_result","text":"print_af_structure_factor_result(k_point, mean_value, err_value, formatted_value, filename)\n\n打印反铁磁结构因子分析结果。\n\n参数:\n\nk_point: 分析的k点\nmean_value: 平均值\nerr_value: 误差\nformatted_value: 格式化后的结果字符串\nfilename: 分析的文件名\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.print_correlation_results-NTuple{8, Any}","page":"API Reference","title":"DataProcessforDQMC.print_correlation_results","text":"print_correlation_results(results_df, filename, Lx, Ly, dropmaxmin, startbin, endbin, n_bins)\n\nPrint single-orbital correlation analysis results.\n\nArguments:\n\nresults_df: DataFrame containing analysis results\nfilename: Name of the correlation file\nLx, Ly: Lattice dimensions\ndropmaxmin: Number of maximum and minimum values dropped\nstartbin, endbin: Bin range used\nn_bins: Total number of bins\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.print_correlation_results_multi_orbital-NTuple{9, Any}","page":"API Reference","title":"DataProcessforDQMC.print_correlation_results_multi_orbital","text":"print_correlation_results_multi_orbital(results_df, filename, Lx, Ly, orbital_labels, dropmaxmin, startbin, endbin, n_bins)\n\nPrint multi-orbital correlation analysis results.\n\nArguments:\n\nresults_df: DataFrame containing analysis results\nfilename: Name of the correlation file\nLx, Ly: Lattice dimensions\norbital_labels: Array of orbital labels\ndropmaxmin: Number of maximum and minimum values dropped\nstartbin, endbin: Bin range used\nn_bins: Total number of bins\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.print_kspace_correlation_results-NTuple{6, Any}","page":"API Reference","title":"DataProcessforDQMC.print_kspace_correlation_results","text":"print_kspace_correlation_results(results_df, filename, dropmaxmin, startbin, endbin, n_bins)\n\n打印k空间关联分析结果。\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.print_kspace_correlation_results_multi_orbital-NTuple{7, Any}","page":"API Reference","title":"DataProcessforDQMC.print_kspace_correlation_results_multi_orbital","text":"print_kspace_correlation_results_multi_orbital(results_df, filename, orbital_labels, dropmaxmin, startbin, endbin, n_bins)\n\n打印多轨道k空间关联分析结果。\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.print_structure_factor_result","page":"API Reference","title":"DataProcessforDQMC.print_structure_factor_result","text":"print_structure_factor_result(k_point, mean_real, mean_imag, err_real, err_imag, \n                             formatted_real, formatted_imag, filename, orbital=\"\")\n\n打印结构因子分析结果。\n\n参数:\n\nk_point: 分析的k点\nmean_real, mean_imag: 平均值（实部和虚部）\nerr_real, err_imag: 误差（实部和虚部）\nformatted_real, formatted_imag: 格式化后的结果字符串\nfilename: 分析的文件名\norbital: 轨道标签（可选，用于多轨道分析）\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.read_format_data-Tuple{String, String}","page":"API Reference","title":"DataProcessforDQMC.read_format_data","text":"read_format_data(dataname::String, data_dir::String)\n\nRead dataname.csv and dataname.toml in data_dir.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.round_error-Tuple{AbstractFloat, Number}","page":"API Reference","title":"DataProcessforDQMC.round_error","text":"round_error(error_val, error_of_error)\n\nRound an error value based on its error of error.\n\nThe error is rounded to be precise to one digit before the first significant digit of error of error. This ensures that the reported error has appropriate precision.\n\nArguments:\n\nerror_val: The error value to be rounded\nerror_of_error: The error of the error (uncertainty in the error estimate)\n\nReturns:\n\nRounded error value with appropriate precision\nThe number of significant digits in the rounded error\n\nExamples:\n\nround_error(23456, 2345)    # Returns (30000,1)\nround_error(2.3456, 0.002345)  # Returns (2.35,3)\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.save_analysis_results","page":"API Reference","title":"DataProcessforDQMC.save_analysis_results","text":"save_analysis_results(df::DataFrame, filename::AbstractString=\"analysis_results.csv\")\n\n将分析结果保存到CSV文件。\n\n参数\n\ndf::DataFrame: 要保存的DataFrame\nfilename::AbstractString=\"analysis_results.csv\": 输出文件名\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.scale_bin_columns","page":"API Reference","title":"DataProcessforDQMC.scale_bin_columns","text":"scale_bin_columns(\n    output_filename::String,\n    input_filename::String,\n    column_factors::Union{Vector{<:Real}, Dict{Int, <:Real}},\n    output_dir::String=pwd(),\n    input_dir::String=pwd();\n    preserve_columns::Union{Vector{Int}, UnitRange{Int}, Nothing}=nothing,\n    default_factor::Real=1.0,\n    verbose::Bool=false\n)\n\n对二进制数据文件的指定列应用标量因子。\n\n参数\n\noutput_filename::String: 输出文件名\ninput_filename::String: 输入文件名\ncolumn_factors::Union{Vector{<:Real}, Dict{Int, <:Real}}: 列因子，可以是向量（按顺序应用）或字典（指定列索引）\noutput_dir::String=pwd(): 输出文件目录\ninput_dir::String=pwd(): 输入文件目录\npreserve_columns::Union{Vector{Int}, UnitRange{Int}, Nothing}=nothing: 保持不变的列索引（这些列将不应用因子）\ndefault_factor::Real=1.0: 未指定列的默认因子\nverbose::Bool=false: 是否输出详细信息\n\n返回值\n\nString: 生成的文件完整路径\n\n示例\n\n# 对第3-10列应用不同的标量因子\nscale_bin_columns(\n    \"scaled_output.bin\",  # 输出文件名\n    \"input.bin\",          # 输入文件名\n    [1, 1, 0.5, 0.5, -1, -1, 0.25, 0.25],  # 列因子\n    preserve_columns=1:2,  # 前两列保持不变\n    verbose=true\n)\n\n# 使用字典指定特定列的因子\nscale_bin_columns(\n    \"scaled_output.bin\",\n    \"input.bin\",\n    Dict(3 => 0.5, 4 => 0.5, 5 => -1, 6 => -1),  # 只修改指定列\n    default_factor=1.0,  # 其他列保持原值\n    verbose=true\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.scan_parameter_directories","page":"API Reference","title":"DataProcessforDQMC.scan_parameter_directories","text":"scan_parameter_directories(base_dir::AbstractString=pwd(); \n                          filter_options::Union{Dict, NamedTuple}=Dict(), \n                          return_params::Bool=false) -> Union{Vector{String}, Vector{Tuple{String,String,Vector{Tuple{String,Any,Int}}}}}\n\nScan and filter subdirectories based on parameters parsed from directory names.\n\nArguments\n\nbase_dir::AbstractString=pwd(): Base directory (default: current dir)\nfilter_options::Union{Dict, NamedTuple}=Dict(): Filtering rules by value type:\nSingle value: equality match. Value may be Number (Int/Float), Bool, or String (e.g. a prefix string).\nArray: membership match. Elements may be Number, Bool, or String.\nTuple(min, max): closed interval match, numeric only (do not use for Bool or String).\nCommon keys include \"prefix\", \"b\", \"U\", \"L\", \"dtau\", \"gw\", \"lprojgw\".\nreturn_params::Bool=false: Whether to also return parsed parameter info.\n\nReturns\n\nWhen return_params=false: Vector{String} of matching directory paths\nWhen return_params=true: Vector{Tuple{String,String,Vector{Tuple{String,Any,Int}}}} of (dir_path, prefix, params_vector)\n\nExamples\n\n# Prefix + array match\nscan_parameter_directories(\".\"; filter_options = Dict(\"prefix\"=>\"proj_x\", \"U\"=>[4.0,6.0]))\n\n# Bool flag\nscan_parameter_directories(\".\"; filter_options = Dict(\"lprojgw\"=>true))\n\n\n\n\n\n","category":"function"},{"location":"api/#DataProcessforDQMC.statistics_columns-Tuple{DataFrames.DataFrame}","page":"API Reference","title":"DataProcessforDQMC.statistics_columns","text":"statistics_columns(df_tmp::DataFrame)\n\naverage and error of each column of a dataframe with only bin and data columns. #!deprecated\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.statistics_columns_withparas-Tuple{Any}","page":"API Reference","title":"DataProcessforDQMC.statistics_columns_withparas","text":"statistics_columns_withparas(df_tmp::DataFrame, paras)\n\naverage and error of a dataframe with bin column, parameter columns specified by paras (symbols) and data columns. #!deprecated\n\n\n\n\n\n","category":"method"},{"location":"api/#DataProcessforDQMC.write_df-Tuple{DataFrames.DataFrame, String, String}","page":"API Reference","title":"DataProcessforDQMC.write_df","text":"write_df(df::DataFrame, data_dir::String, dataname::String)\n\nWrite df into data_dir/formatted_data/dataname.csv and data_dir/formatted_data/dataname.toml.\n\n\n\n\n\n","category":"method"},{"location":"multi_parameter_analysis/#multi_parameter_analysis","page":"多参数分析指南","title":"多参数分析指南","text":"","category":"section"},{"location":"multi_parameter_analysis/#filter_options:-多文件夹扫描时的文件夹筛选","page":"多参数分析指南","title":"filter_options: 多文件夹扫描时的文件夹筛选","text":"","category":"section"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"本节介绍多参数分析中 filter_options 这个关键字参数：谁在用、底层落点，以及最小可用写法。","category":"page"},{"location":"multi_parameter_analysis/#哪些函数包含-filter_options","page":"多参数分析指南","title":"哪些函数包含 filter_options","text":"","category":"section"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"src/multiple-parameter-analysis/structure-factor.jl\nanalyze_structure_factor_multi_parameter\nanalyze_AFM_structure_factor_multi_parameter\nanalyze_CDW_structure_factor_multi_parameter\nsrc/multiple-parameter-analysis/correlation-ratio.jl\nanalyze_correlation_ratio_multi_parameter\nanalyze_AFM_correlation_ratio_multi_parameter\nanalyze_CDW_correlation_ratio_multi_parameter\nsrc/multiple-parameter-analysis/common-functions.jl\nscan_parameter_directories（最底层）","category":"page"},{"location":"multi_parameter_analysis/#filter_options-的写法（Dict-或-NamedTuple）","page":"多参数分析指南","title":"filter_options 的写法（Dict 或 NamedTuple）","text":"","category":"section"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"值类型分三类（多个条件为 AND 关系）：\n单值：相等匹配。支持 Number（Int/Float）、Bool、String（例如前缀字符串）。\n数组：集合包含匹配。数组元素可为 Number、Bool、String。\n二元元组：(min, max) 闭区间匹配，仅用于数值（不用于 Bool 或 String）。\n为空表示不过滤。\n键名需与目录解析得到的参数名一致；常见键包括 \"prefix\", \"b\", \"U\", \"L\", \"dtau\", \"gw\", \"lprojgw\" 等。","category":"page"},{"location":"multi_parameter_analysis/#最小示例","page":"多参数分析指南","title":"最小示例","text":"","category":"section"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"# 结构因子：同时限定多个参数\nanalyze_AFM_structure_factor_multi_parameter(\n    \".\";\n    filter_options = Dict(\n        \"U\" => (4.0, 8.0),   # 闭区间\n        \"L\" => [9, 12],      # 多选一\n        \"dtau\" => 0.1        # 单值\n    )\n)","category":"page"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"# 关联比率：使用 NamedTuple 写法\nanalyze_CDW_correlation_ratio_multi_parameter(\n    \".\";\n    filter_options = (U = [4.0, 6.0], L = 12)\n)","category":"page"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"# 布尔参数示例（例如 lprojgw 为 true）\nscan_parameter_directories(\n    \".\";\n    filter_options = Dict(\"lprojgw\" => true)\n)","category":"page"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"# 直接扫描目录（底层函数），仅示例用法\nscan_parameter_directories(\".\"; filter_options = Dict(\"prefix\" => \"your_prefix\"))","category":"page"},{"location":"multi_parameter_analysis/","page":"多参数分析指南","title":"多参数分析指南","text":"要点：条件按 AND 组合；区间为闭区间；空 filter_options 不做筛选。","category":"page"},{"location":"bin_analysis/#bin_analysis_guide","page":"Bin Analysis与数据处理指南","title":"Bin Analysis 与数据处理指南","text":"","category":"section"},{"location":"bin_analysis/#功能概览","page":"Bin Analysis与数据处理指南","title":"功能概览","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"DataProcessforDQMC.jl 提供了完整的bin数据处理和分析工作流。","category":"page"},{"location":"bin_analysis/#数据处理流程","page":"Bin Analysis与数据处理指南","title":"数据处理流程","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"原始数据 (.bin 文件)\n    ↓\n数据处理 (四大核心操作)\n├─ combine: 多文件加权组合\n├─ scale:   列缩放\n├─ merge:   列合并\n└─ filter:  行提取 (特定坐标)\n    ↓\n数据导出\n├─ CSV:  Excel/Python 友好\n└─ JLD2: Julia 原生高效\n    ↓\n可视化分析","category":"page"},{"location":"bin_analysis/#核心数据处理-(src/data-processing/)","page":"Bin Analysis与数据处理指南","title":"核心数据处理 (src/data-processing/)","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"基本操作 (bin-file-operations-basic.jl):","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"combine_bin_files - Combine 操作\nscale_bin_columns - Scale 操作  \nmerge_bin_columns - Merge 操作\nfilter_bin_file - Filter 操作","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"导出功能 (bin-file-export.jl):","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"export_bin_to_dataframe - 转换为 DataFrame\nexport_bin_to_csv - 导出为 CSV\nexport_bin_to_jld2 - 导出为 JLD2\nexport_directory_bins - 批量导出","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"导出量生成 (derived-bin-generation-*.jl):","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"afm_k_files_generation - AFM 相关文件生成工作流\ncdw_k_files_generation - CDW 相关文件生成工作流\nmerge_afm_sf - AFM 结构因子 (应用 merge 操作)\ncombine_ss_components - 自旋分量合并 (应用 combine 操作)","category":"page"},{"location":"bin_analysis/#主要功能","page":"Bin Analysis与数据处理指南","title":"主要功能","text":"","category":"section"},{"location":"bin_analysis/#1.-数据处理的四大核心操作","page":"Bin Analysis与数据处理指南","title":"1. 数据处理的四大核心操作","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"数据处理模块位于 src/data-processing/，提供四种对 .bin 文件的基本操作：","category":"page"},{"location":"bin_analysis/#1.1-Combine-多文件加权组合","page":"Bin Analysis与数据处理指南","title":"1.1 Combine - 多文件加权组合","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"将多个 bin 文件按权重组合成新文件。","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"combine_bin_files(\"ss_k.bin\", [(\"spsm_k.bin\", 1.0), (\"szsz_k.bin\", 1.0)])","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"应用场景: 合并自旋分量（如 (S⁺S⁻ + S⁻S⁺)/2 + SᶻSᶻ）","category":"page"},{"location":"bin_analysis/#1.2-Scale-列缩放","page":"Bin Analysis与数据处理指南","title":"1.2 Scale - 列缩放","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"对 bin 文件的指定列进行缩放。","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"scale_bin_columns(\"scaled.bin\", \"input.bin\", [1, 1, 0.5, 0.5, ...])","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"应用场景: 归一化、单位换算","category":"page"},{"location":"bin_analysis/#1.3-Merge-列合并","page":"Bin Analysis与数据处理指南","title":"1.3 Merge - 列合并","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"将多个文件的列合并，或对列进行线性组合。","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"merge_afm_sf(\"afm_sf_k.bin\", \"ss_k.bin\")  # S_AFM = AA + BB - AB - BA","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"应用场景: 生成导出量（如 AFM/CDW 结构因子）","category":"page"},{"location":"bin_analysis/#1.4-Filter-行提取","page":"Bin Analysis与数据处理指南","title":"1.4 Filter - 行提取","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"提取特定坐标的所有 bin 数据。","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"# K空间：提取特定动量点的所有bin\nfilter_bin_file(\"nn_k.bin\", (-0.458, -0.458), dir=\"data/\")\n# 输出: nn_k_-0.458_-0.458.bin (包含该k点的所有bin)\n\n# R空间：提取特定格点的所有bin\nfilter_bin_file(\"nn_r.bin\", (1, 2), dir=\"data/\")\n# 输出: nn_r_1_2.bin (包含该位置的所有bin)","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"应用场景: Bin 收敛性分析、特定点的统计涨落分析","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"","category":"page"},{"location":"bin_analysis/#2.-数据导出功能","page":"Bin Analysis与数据处理指南","title":"2. 数据导出功能","text":"","category":"section"},{"location":"bin_analysis/#导出为DataFrame","page":"Bin Analysis与数据处理指南","title":"导出为DataFrame","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"# 默认导出（4个轨道：AA, AB, BA, BB）\ndf = export_bin_to_dataframe(\"nn_k.bin\", dir=\"data/\")\n# 返回DataFrame，包含列: bin, kx, ky, AA_real, AA_imag, AB_real, AB_imag, ...\n\n# 自定义轨道对配置（仅导出对角项 AA, BB）\ndf = export_bin_to_dataframe(\"nn_k.bin\", dir=\"data/\",\n    orbital_columns=[(3,4), (9,10)],\n    orbital_labels=[\"AA\", \"BB\"])\n# 返回DataFrame，包含列: bin, kx, ky, AA_real, AA_imag, BB_real, BB_imag\n# 注：AA, BB等表示轨道对，如AA表示轨道A到轨道A的关联","category":"page"},{"location":"bin_analysis/#导出为CSV","page":"Bin Analysis与数据处理指南","title":"导出为CSV","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"export_bin_to_csv(\"nn_k.bin\", dir=\"data/\")\n# 输出: data/exported_csv/nn_k.csv","category":"page"},{"location":"bin_analysis/#导出为JLD2","page":"Bin Analysis与数据处理指南","title":"导出为JLD2","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"export_bin_to_jld2(\"nn_k.bin\", dir=\"data/\")\n# 输出: data/exported_jld2/nn_k.jld2 (dataset: \"nn_k\")\n# 读取: load(\"nn_k.jld2\", \"nn_k\")\n\n# 如需合并多个文件到一个JLD2\nexport_bin_to_jld2(\"nn_k.bin\", dir=\"data/\", output_file=\"all_data.jld2\")  # dataset: nn_k\nexport_bin_to_jld2(\"nn_r.bin\", dir=\"data/\", output_file=\"all_data.jld2\")  # dataset: nn_r\n# 输出: data/exported_jld2/all_data.jld2 (datasets: \"nn_k\", \"nn_r\")\n# 读取: load(\"all_data.jld2\", \"nn_k\") 或 load(\"all_data.jld2\", \"nn_r\")","category":"page"},{"location":"bin_analysis/#批量导出","page":"Bin Analysis与数据处理指南","title":"批量导出","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"# 默认导出为CSV和JLD2\nexport_directory_bins(\"data/\", file_patterns=[\"*_k.bin\", \"*_r.bin\"])\n\n# 指定输出格式\nexport_directory_bins(\"data/\", output_format=:csv)   # 仅CSV\nexport_directory_bins(\"data/\", output_format=:jld2)  # 仅JLD2\nexport_directory_bins(\"data/\", output_format=:both)  # CSV + JLD2（默认）","category":"page"},{"location":"bin_analysis/#数据格式说明","page":"Bin Analysis与数据处理指南","title":"数据格式说明","text":"","category":"section"},{"location":"bin_analysis/#Bin文件结构","page":"Bin Analysis与数据处理指南","title":"Bin文件结构","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"原始bin文件 (如 nn_k.bin):\n- 5760行 = 576个k点 × 10个bin\n- 按bin分块存储:\n  第1-576行:    bin 0 (所有k点)\n  第577-1152行:  bin 1 (所有k点)\n  ...\n  第5185-5760行: bin 9 (所有k点)","category":"page"},{"location":"bin_analysis/#CSV输出格式","page":"Bin Analysis与数据处理指南","title":"CSV输出格式","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"多轨道数据 (nn_k.csv):","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"bin,kx,ky,AA_real,AA_imag,AB_real,AB_imag,BA_real,BA_imag,BB_real,BB_imag\n1,-0.458,-0.458,0.297,-6.62e-10,0.055,0.003,0.055,-0.003,0.289,-8.10e-10\n2,-0.458,-0.458,0.292,-5.75e-10,0.055,-0.002,0.055,0.002,0.299,-3.34e-10\n...","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"单列数据 (afmsfk.csv):","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"bin,kx,ky,value_real,value_imag\n1,-0.458,-0.458,0.503,-9.38e-10\n2,-0.458,-0.458,0.497,-6.46e-10\n...","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"过滤后的数据 (afmsfk0.5000.500.csv):","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"bin,kx,ky,value_real,value_imag\n1,0.5,0.5,0.496,-9.28e-10\n2,0.5,0.5,0.497,-6.46e-10\n...\n10,0.5,0.5,0.496,-1.15e-9","category":"page"},{"location":"bin_analysis/#典型工作流","page":"Bin Analysis与数据处理指南","title":"典型工作流","text":"","category":"section"},{"location":"bin_analysis/#工作流1:-生成导出量（derive-应用）","page":"Bin Analysis与数据处理指南","title":"工作流1: 生成导出量（derive 应用）","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"使用数据处理操作生成物理导出量：","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"using DataProcessforDQMC\n\n# 应用示例：生成 AFM 相关文件\n# 内部使用 combine + merge 操作\nafm_k_files_generation(\"data/\")\n\n# Step 2: 过滤特定k点 (filter 操作)\nfilter_bin_file(\"afm_sf_k.bin\", (0.5, 0.5), dir=\"data/\")\n\n# Step 3: 导出为CSV用于可视化\nexport_bin_to_csv(\"afm_sf_k_0.500_0.500.bin\", dir=\"data/\")\n\n# Step 4: 在Python中绘图\n# import pandas as pd\n# import matplotlib.pyplot as plt\n# df = pd.read_csv('afm_sf_k_0.500_0.500.csv')\n# plt.plot(df['bin'], df['value_real'])\n# plt.xlabel('Bin index')\n# plt.ylabel('S_AFM(π,π)')","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"涉及操作: derive 工作流 (combine+merge) → filter → export","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"","category":"page"},{"location":"bin_analysis/#工作流2:-批量数据导出","page":"Bin Analysis与数据处理指南","title":"工作流2: 批量数据导出","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"using DataProcessforDQMC\n\n# 导出目录下所有关联函数（默认为CSV和JLD2）\nexport_directory_bins(\n    \"data/\",\n    file_patterns=[\"nn_*.bin\", \"spsm_*.bin\", \"afm_sf_*.bin\"],\n    iscorrelation=true\n)\n\n# 在Excel中打开：exported_csv/*.csv\n# 在Python中批量分析：\n# import pandas as pd\n# import glob\n# for f in glob.glob('exported_csv/*.csv'):\n#     df = pd.read_csv(f)\n#     # 进行分析...\n\n# 在Julia中批量加载（使用JLD2）：\n# using JLD2, DataFrames\n# nn_k_df = load(\"exported_jld2/nn_k.jld2\", \"nn_k\")\n# nn_r_df = load(\"exported_jld2/nn_r.jld2\", \"nn_r\")\n# spsm_k_df = load(\"exported_jld2/spsm_k.jld2\", \"spsm_k\")","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"涉及操作: export","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"","category":"page"},{"location":"bin_analysis/#工作流3:-多k点关联函数的Bin涨落分析","page":"Bin Analysis与数据处理指南","title":"工作流3: 多k点关联函数的Bin涨落分析","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"目的: 检查DQMC模拟是否已经热化并达到统计平衡，通过观察不同bin的涨落判断收敛性。","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"分析指标:","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"前几个bin: 可能处于热化阶段，数值逐渐稳定\n后续bin: 应呈现统计涨落（上下振荡），围绕平均值波动\n收敛标志: bin数据在误差范围内上下振荡，无明显趋势","category":"page"},{"location":"bin_analysis/#方案1:-先筛选特定k点再导出（推荐用于关注少数k点）","page":"Bin Analysis与数据处理指南","title":"方案1: 先筛选特定k点再导出（推荐用于关注少数k点）","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"using DataProcessforDQMC\n\n# 指定关心的k点（通常是高对称点）\nk_points = [\n    (0.0, 0.0),        # Γ点\n    (0.5, 0.0),        # X点  \n    (0.5, 0.5)         # M点\n]\n\nfor k in k_points\n    # 1. 筛选特定k点的所有bin数据\n    filter_bin_file(\"nn_k.bin\", k, dir=\"data/\")\n    \n    # 2. 导出为CSV用于Excel分析\n    kx_str = @sprintf(\"%.3f\", k[1])\n    ky_str = @sprintf(\"%.3f\", k[2])\n    filename = \"nn_k_$(kx_str)_$(ky_str).bin\"\n    export_bin_to_csv(filename, dir=\"data/\")\nend\n\n# 3. 在Excel中打开CSV文件，观察每个k点的bin演化\n#    - 横轴: bin index (1, 2, 3, ...)\n#    - 纵轴: 关联函数值\n#    - 检查: 数据是否在后期呈现稳定的上下振荡","category":"page"},{"location":"bin_analysis/#方案2:-直接导出全部数据（适合系统性分析）","page":"Bin Analysis与数据处理指南","title":"方案2: 直接导出全部数据（适合系统性分析）","text":"","category":"section"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"using DataProcessforDQMC\n\n# 直接导出完整的关联函数数据\nexport_bin_to_csv(\"nn_k.bin\", dir=\"data/\")\n\n# 在Excel中：\n# 1. 打开 exported_csv/nn_k.csv\n# 2. 使用筛选功能选择特定k点 (kx, ky)\n# 3. 绘制 bin vs value_real 曲线\n# 4. 观察数据点的演化趋势","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"收敛性判断:","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"✅ 良好收敛: bin 3-10 在平均值附近上下振荡，标准差较小\n⚠️ 未完全热化: 前几个bin数值持续增大或减小\n❌ 未收敛: 所有bin呈现明显趋势，无稳定振荡","category":"page"},{"location":"bin_analysis/","page":"Bin Analysis与数据处理指南","title":"Bin Analysis与数据处理指南","text":"涉及操作: filter → export (或直接 export)","category":"page"},{"location":"precompilation/#precompilation_guide","page":"预编译指南","title":"预编译系统镜像指南","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"为了获得最佳的启动速度和性能，DataProcessforDQMC支持预编译系统镜像。预编译后的Julia启动时间从数秒缩短到毫秒级。","category":"page"},{"location":"precompilation/#前置准备（首次使用）","page":"预编译指南","title":"🚀 前置准备（首次使用）","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"如果您还没有安装Julia，请按照以下步骤操作：","category":"page"},{"location":"precompilation/#1.-安装Julia","page":"预编译指南","title":"1. 安装Julia","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"使用juliaup安装器（官方推荐）：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"curl -fsSL https://install.julialang.org | sh","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"安装完成后，重新加载shell配置：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"source ~/.bashrc  # 或 source ~/.zshrc","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"验证安装：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"julia --version","category":"page"},{"location":"precompilation/#2.-安装PackageCompiler","page":"预编译指南","title":"2. 安装PackageCompiler","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"启动Julia REPL并安装PackageCompiler包：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"julia","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"在Julia REPL中执行：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"using Pkg\nPkg.add(\"PackageCompiler\")","category":"page"},{"location":"precompilation/#3.-安装DataProcessforDQMC包到全局环境","page":"预编译指南","title":"3. 安装DataProcessforDQMC包到全局环境","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"在Julia REPL中安装本地包到全局环境：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"julia","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"在Julia REPL中执行：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"using Pkg\n\n# 方式1：仅使用（推荐）\nPkg.add(path=\"/path/to/DataProcessforDQMC\")\n\n# 方式2：开发模式（如需修改源代码）\nPkg.develop(path=\"/path/to/DataProcessforDQMC\")","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"tip: 安装方式选择\n使用 Pkg.add() 如果您只需要使用这个包\n使用 Pkg.develop() 如果您需要修改包的源代码","category":"page"},{"location":"precompilation/#构建系统镜像","page":"预编译指南","title":"📦 构建系统镜像","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"启动 Julia 并执行：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"using DataProcessforDQMC, PackageCompiler\nDataProcessforDQMC.compile()","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"这将在 ~/.julia/sysimages/ 目录下生成 sys_dataprocessfordqmc.so 系统镜像文件（约380MB），并自动显示使用说明。","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"note: 编译时间\n首次编译可能需要1-2分钟，请耐心等待。","category":"page"},{"location":"precompilation/#配置Julia启动器","page":"预编译指南","title":"⚙️ 配置Julia启动器","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"将以下配置添加到您的 ~/.bashrc 或 ~/.zshrc 文件中：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"# DataProcessforDQMC 预编译镜像启动器\nfunction jd() {\n    local sysimage=\"$HOME/.julia/sysimages/sys_dataprocessfordqmc.so\"\n\n    if [ ! -f \"$sysimage\" ]; then\n        echo \"Error: system image file not found: $sysimage\"\n        return 1\n    fi\n\n    if [ $# -eq 0 ]; then\n        # 无参数：启动交互式会话并自动加载包\n        echo \"Starting DataProcessforDQMC interactive session...\"\n        julia --sysimage \"$sysimage\" -e 'using DataProcessforDQMC' -i\n    else\n        # 有参数：运行脚本或传递其他参数\n        julia --sysimage \"$sysimage\" \"$@\"\n    fi\n}\n\n# 开发版本（不使用系统镜像，实时加载代码修改）\nalias jdd=\"julia -e 'using DataProcessforDQMC' -i\"","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"然后重新加载配置：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"source ~/.bashrc  # 或 source ~/.zshrc","category":"page"},{"location":"precompilation/#使用方式","page":"预编译指南","title":"🎯 使用方式","text":"","category":"section"},{"location":"precompilation/#交互式会话","page":"预编译指南","title":"交互式会话","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"jd  # 启动预编译的DataProcessforDQMC交互会话","category":"page"},{"location":"precompilation/#运行脚本","page":"预编译指南","title":"运行脚本","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"jd your_analysis_script.jl  # 使用预编译镜像运行脚本","category":"page"},{"location":"precompilation/#开发调试","page":"预编译指南","title":"开发调试","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"jdd  # 使用开发版本（实时加载代码修改）","category":"page"},{"location":"precompilation/#何时需要重新编译","page":"预编译指南","title":"🔄 何时需要重新编译","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"以下情况需要重新编译系统镜像：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"代码修改：修改了DataProcessforDQMC包的源代码\n依赖更新：更新了包的依赖项\nJulia版本升级：升级了Julia版本\n函数签名变更：修改了公共API函数的参数","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"重新编译命令：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"using DataProcessforDQMC, PackageCompiler\nDataProcessforDQMC.compile()","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"warning: 代码修改后\n每次修改源代码后都需要重新编译系统镜像，否则修改不会生效。开发调试时建议使用 jdd 命令，它会实时加载代码修改。","category":"page"},{"location":"precompilation/#性能对比","page":"预编译指南","title":"💡 性能对比","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"启动方式 首次加载时间 后续启动时间 适用场景\njd (预编译) ~200ms ~100ms 生产分析、批量处理\njdd (开发版) ~3-5s ~2-3s 代码开发、调试","category":"page"},{"location":"precompilation/#基本使用示例","page":"预编译指南","title":"📋 基本使用示例","text":"","category":"section"},{"location":"precompilation/#多参数分析","page":"预编译指南","title":"多参数分析","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"# 启动预编译版本\njd\n\n# 分析反铁磁相关比率\nbase_dir = \"/path/to/simulation/data\"\nresults = analyze_AFM_correlation_ratio_multi_parameter(\n    base_dir,\n    shift_point=(0.25, 0.0),\n    filter_options=Dict(\n        :prefix => \"proj_bt_honeycomb_exact\",\n        :L => 6,\n        :dtau => 0.1\n    )\n)","category":"page"},{"location":"precompilation/#目录扫描","page":"预编译指南","title":"目录扫描","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"# 扫描符合条件的参数目录\ndirs = scan_parameter_directories(\n    base_dir,\n    filter_options=Dict(\n        :prefix => \"honeycomb_model\",\n        :U => [3.0, 4.0, 5.0],\n        :L => 12\n    )\n)","category":"page"},{"location":"precompilation/#故障排除","page":"预编译指南","title":"🛠️ 故障排除","text":"","category":"section"},{"location":"precompilation/#系统镜像损坏","page":"预编译指南","title":"系统镜像损坏","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"如果遇到奇怪的错误，尝试重新编译：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"rm ~/.julia/sysimages/sys_dataprocessfordqmc.so","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"然后重新运行：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"using DataProcessforDQMC, PackageCompiler\nDataProcessforDQMC.compile()","category":"page"},{"location":"precompilation/#路径问题","page":"预编译指南","title":"路径问题","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"确认系统镜像文件已正确生成：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"ls -la ~/.julia/sysimages/sys_dataprocessfordqmc.so","category":"page"},{"location":"precompilation/#PackageCompiler未安装","page":"预编译指南","title":"PackageCompiler未安装","text":"","category":"section"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"如果编译失败，可能需要安装PackageCompiler：","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"using Pkg\nPkg.add(\"PackageCompiler\")","category":"page"},{"location":"precompilation/","page":"预编译指南","title":"预编译指南","text":"tip: 建议\n建议将预编译版本 jd 用于日常分析工作，将开发版本 jdd 用于代码开发和调试。","category":"page"},{"location":"#DataProcessforDQMC","page":"Home","title":"DataProcessforDQMC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DataProcessforDQMC.","category":"page"},{"location":"#文档导航","page":"Home","title":"文档导航","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"预编译系统镜像指南\nBin Analysis 与数据处理指南\n多参数分析指南\nAPI Reference","category":"page"},{"location":"#目录","page":"Home","title":"目录","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"precompilation.md\",\n    \"multi_parameter_analysis.md\",\n    \"bin_analysis.md\",\n    \"api.md\"\n]","category":"page"}]
}
